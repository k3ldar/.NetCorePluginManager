<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AspNetCore.PluginManager</name>
    </assembly>
    <members>
        <member name="T:AspNetCore.PluginManager.ConfigurePluginManagerExtender">
            <summary>
            Plugin Manager IMvcBuilder extension class.
            </summary>
        </member>
        <member name="M:AspNetCore.PluginManager.ConfigurePluginManagerExtender.ConfigurePluginManager(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            IApplicationBuilder extender method used to provide easy access to ConfigurePluginManager 
            method when configuring an application.
            </summary>
            <param name="mvcBuilder">IMvcBuilder instance.</param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="T:AspNetCore.PluginManager.Classes.Minify.MinifyResult">
            <summary>
            Indicates the individual timings, start and end length of data and name of minification process.
            </summary>
        </member>
        <member name="M:AspNetCore.PluginManager.Classes.Minify.MinifyResult.#ctor(System.String@,System.Int32@)">
            <summary>
            Constructor
            </summary>
            <param name="processName">Name of individual minification process name.</param>
            <param name="startLength">Starting length of the data to be minified.</param>
        </member>
        <member name="P:AspNetCore.PluginManager.Classes.Minify.MinifyResult.ProcessName">
            <summary>
            Name of process within the minification, if the minification is not split into individual elements then the name of the minification engine.
            </summary>
            <value>string</value>
        </member>
        <member name="P:AspNetCore.PluginManager.Classes.Minify.MinifyResult.StartLength">
            <summary>
            Length of data before minification has taken place.
            </summary>
            <value>int</value>
        </member>
        <member name="P:AspNetCore.PluginManager.Classes.Minify.MinifyResult.EndLength">
            <summary>
            Length of data after minification has completed.
            </summary>
            <value>int</value>
        </member>
        <member name="P:AspNetCore.PluginManager.Classes.Minify.MinifyResult.TimeTaken">
            <summary>
            Time taken to complete the minification
            </summary>
            <value>decimal</value>
        </member>
        <member name="M:AspNetCore.PluginManager.Classes.Minify.MinifyResult.Finalise(System.Int32,System.Decimal)">
            <summary>
            Called to indicate the minification process is complete and store the final length of data and time taken in 1000ths ms.
            </summary>
            <param name="endLength">Length of data after minification.</param>
            <param name="timeTaken">Time taken to complete the minification.</param>
        </member>
        <member name="T:AspNetCore.PluginManager.Classes.Minify.PreserveBlock">
            <summary>
            Represents a block of preserved data that should not be modified during minification
            </summary>
        </member>
        <member name="M:AspNetCore.PluginManager.Classes.Minify.PreserveBlock.#ctor(SharedPluginFeatures.MinificationPreserveBlock@,System.Int32@)">
            <summary>
            Constructor
            </summary>
            <param name="blockType">Type of minification block.</param>
            <param name="startBlock">Start of block within the data.</param>
        </member>
        <member name="P:AspNetCore.PluginManager.Classes.Minify.PreserveBlock.BlockStart">
            <summary>
            Starting index of the block of data.
            </summary>
            <value>int</value>
        </member>
        <member name="P:AspNetCore.PluginManager.Classes.Minify.PreserveBlock.BlockEnd">
            <summary>
            Ending index of the block of data.
            </summary>
            <value>int</value>
        </member>
        <member name="P:AspNetCore.PluginManager.Classes.Minify.PreserveBlock.BlockType">
            <summary>
            Type of preserved block
            </summary>
            <value>MinificationPreserveBlock</value>
        </member>
        <member name="T:AspNetCore.PluginManager.Classes.SystemAdmin.LoadedModulesMenu">
            <summary>
            Returns a list of all assemblies currently loaded by the application and can 
            be viewed within SystemAdmin.Plugin.  
            
            This class descends from SystemAdminSubMenu.
            </summary>
        </member>
        <member name="M:AspNetCore.PluginManager.Classes.SystemAdmin.LoadedModulesMenu.Data">
            <summary>
            Returns delimited data on all loaded assemblies and their version.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:AspNetCore.PluginManager.Classes.SystemAdmin.LoadedPluginsMenu">
            <summary>
            Returns a list of all plugin modules that are loaded and can be viewed within 
            SystemAdmin.Plugin.  
            
            This class descends from SystemAdminSubMenu.
            </summary>
        </member>
        <member name="M:AspNetCore.PluginManager.Classes.SystemAdmin.LoadedPluginsMenu.Data">
            <summary>
            Returns delimited data on all plugin modules that have been loaded by AspNetCore.PluginManager.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:AspNetCore.PluginManager.Classes.SystemAdmin.ThreadMenu">
            <summary>
            Returns a list of all threads and their current status that can be viewed within 
            SystemAdmin.Plugin.  
            
            This class descends from SystemAdminSubMenu.
            </summary>
        </member>
        <member name="M:AspNetCore.PluginManager.Classes.SystemAdmin.ThreadMenu.Data">
            <summary>
            Returns delimited data on current active threads and their current status
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:AspNetCore.PluginManager.Classes.LoggerStatistics">
            <summary>
            Returns a list of the last 100 log entries that can be viewed within SystemAdmin.Plugin.  
            
            This class descends from SystemAdminSubMenu and ILogger
            </summary>
        </member>
        <member name="M:AspNetCore.PluginManager.Classes.LoggerStatistics.Data">
            <summary>
            Returns delimited data on current log data, this will only store the last 100 entries.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:AspNetCore.PluginManager.UsePluginManagerExtender">
            <summary>
            Plugin Manager extender class.
            </summary>
        </member>
        <member name="M:AspNetCore.PluginManager.UsePluginManagerExtender.UsePluginManager(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            IApplicationBuilder extender method used to provide easy access to UsePluginManager 
            method when configuring an application.
            </summary>
            <param name="mvcApplication">IApplicationBuilder instance</param>
            <returns>IApplicationBuilder</returns>
        </member>
        <member name="M:AspNetCore.PluginManager.NetCorePluginManager.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder@)">
            <summary>
            Allows plugins to configure with the current App Builder
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:AspNetCore.PluginManager.NetCorePluginSettings">
            <summary>
            Settings that affect how PluginManager works.
            </summary>
        </member>
        <member name="P:AspNetCore.PluginManager.NetCorePluginSettings.CSSLocation">
            <summary>
            Path where .css files will be placed when being extracted from plugin modules.
            </summary>
            <value>string</value>
        </member>
        <member name="P:AspNetCore.PluginManager.NetCorePluginSettings.JScriptLocation">
            <summary>
            Path where .js files will be placed when being extracted from plugin modules.
            </summary>
            <value>string</value>
        </member>
        <member name="P:AspNetCore.PluginManager.NetCorePluginSettings.DisableRouteDataService">
            <summary>
            Prevents PluginManager from creating an IRouteDataService instance that can be obtained from IoC
            </summary>
            <value>bool</value>
        </member>
        <member name="P:AspNetCore.PluginManager.NetCorePluginSettings.MinifyFiles">
            <summary>
            Indicates that files should be minified
            </summary>
        </member>
        <member name="T:AspNetCore.PluginManager.PluginManagerService">
            <summary>
            Static class containing methods that can be used to configure and initialise the Plugin Manager.
            </summary>
        </member>
        <member name="M:AspNetCore.PluginManager.PluginManagerService.Initialise">
            <summary>
            Initialises the PluginManager using default confguration.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AspNetCore.PluginManager.PluginManagerService.Initialise(PluginManager.PluginManagerConfiguration@)">
            <summary>
            Initialises the PluginManager using a specific user defined configuration.
            </summary>
            <param name="configuration"></param>
            <returns>bool</returns>
        </member>
        <member name="M:AspNetCore.PluginManager.PluginManagerService.Finalise">
            <summary>
            Finalises the PluginManger, provides an opportunity for the plugins to clean up ready for close down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AspNetCore.PluginManager.PluginManagerService.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures all plugin modules, allowing the modules to setup services for the application.
            </summary>
            <param name="app">IApplicationBuilder instance.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the Plugin Manager has not been initialised.</exception>
        </member>
        <member name="M:AspNetCore.PluginManager.PluginManagerService.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Configure all plugin modules, this method is now deprecated and will be removed in a future release
            </summary>
            <param name="app">IApplicationBuilder instance</param>
            <param name="env">IHostingEnvironment instance</param>
        </member>
        <member name="M:AspNetCore.PluginManager.PluginManagerService.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures all plugin module services, allowing the modules to add their own services to the application.
            </summary>
            <param name="services">IServiceCollection instance</param>
        </member>
        <member name="M:AspNetCore.PluginManager.PluginManagerService.UsePlugin(System.Type)">
            <summary>
            UsePlugin is designed to load plugins that have been statically loaded into the host application specifically nuget packages or project references.
            
            If a plugin is required to be initialised prior to other plugins, you can alter the load order by calling UsePlugin prior to calling Initialise.
            </summary>
            <param name="iPluginType">Type of IPlugin interface.  The type passed in must inherit IPlugin interface.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the iPluginType does not implement IPlugin interface.</exception>
        </member>
    </members>
</doc>
