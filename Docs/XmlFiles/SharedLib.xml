<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharedLib</name>
    </assembly>
    <members>
        <member name="T:Shared.Classes.CacheManager">
            <summary>
            Cache Manager
            </summary>
        </member>
        <member name="F:Shared.Classes.CacheManager._cacheLockObject">
            <summary>
            cache lock object
            </summary>
        </member>
        <member name="M:Shared.Classes.CacheManager.#ctor(System.String,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="cacheName">Name of cache, must be unique</param>
            <param name="maximumAge">Maximum age of items within the cache</param>
            <param name="resetMaximumAge">Reset age of item when retrieved</param>
            <param name="allowClearAll">Allows the cache to be cleared automatically</param>
        </member>
        <member name="M:Shared.Classes.CacheManager.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheManager.Name">
            <summary>
            Cache Manager Name
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheManager.AllowClearAll">
            <summary>
            If false, cache will not be cleared when ClearAllCaches is called
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheManager.MaximumAge">
            <summary>
            Maximum age of cached item
            
            once an item reaches this age it will be automatically removed from the list
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheManager.ResetMaximumAge">
            <summary>
            If true, whenever the item is retrieved from the cache then the age of the item is reset 
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheManager.Count">
            <summary>
            Returns number of cached items
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheManager.Items">
            <summary>
            Returns a list of all cached items
            </summary>
            <returns>List of CacheItem's if found, otherwise null</returns>
        </member>
        <member name="M:Shared.Classes.CacheManager.Add(System.String,Shared.Classes.CacheItem,System.Boolean)">
            <summary>
            Add's an item to the cached list
            </summary>
            <param name="name">Name of cached item</param>
            <param name="value">Cached item value</param>
            <param name="deleteIfExists">if true and the list contains a value with the same name, then the existing item is deleted</param>
        </member>
        <member name="M:Shared.Classes.CacheManager.Get(System.String)">
            <summary>
            Returns a cached item
            
            If the item isn't found, an event is raised to retrieve the item, subsequently adding it to the list of items
            </summary>
            <param name="name">Name of cached item</param>
            <returns>CacheItem if found, otherwise null</returns>
        </member>
        <member name="M:Shared.Classes.CacheManager.Clear">
            <summary>
            Clears all cache items
            </summary>
        </member>
        <member name="M:Shared.Classes.CacheManager.Remove(Shared.Classes.CacheItem)">
            <summary>
            Removes a specific item from the cache
            </summary>
            <param name="item">Item to be removed</param>
        </member>
        <member name="M:Shared.Classes.CacheManager.CleanCachedItems">
            <summary>
            Called to clean cached items, remove those that have expired etc
            </summary>
        </member>
        <member name="E:Shared.Classes.CacheManager.ItemNotFound">
            <summary>
            Event raised when a cached item can not be found
            </summary>
        </member>
        <member name="E:Shared.Classes.CacheManager.ItemAdd">
            <summary>
            Event raised when item added to the cache
            </summary>
        </member>
        <member name="E:Shared.Classes.CacheManager.ItemRemoved">
            <summary>
            Event raised when item removed from the cache
            </summary>
        </member>
        <member name="F:Shared.Classes.CacheManager._allCaches">
            <summary>
            List of all cache's created by application
            </summary>
        </member>
        <member name="M:Shared.Classes.CacheManager.CleanAllCaches">
            <summary>
            Forces a clean up of all caches, removing older items that have expired
            </summary>
        </member>
        <member name="M:Shared.Classes.CacheManager.ClearAllCaches">
            <summary>
            Forces a clean up of all caches, removing all items
            </summary>
        </member>
        <member name="M:Shared.Classes.CacheManager.CacheExists(System.String)">
            <summary>
            Returns the numer of caches
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.CacheManager.GetCache(System.String)">
            <summary>
            Returns the numer of caches
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.CacheManager.GetCount">
            <summary>
            Returns the numer of caches
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.CacheManager.GetCacheName(System.Int32)">
            <summary>
            Get's the name of the cache
            </summary>
            <param name="index">Index of the caches</param>
            <returns>Cache name</returns>
        </member>
        <member name="M:Shared.Classes.CacheManager.GetCacheAge(System.Int32)">
            <summary>
            Get's the maximum age of a cache
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.CacheManager.GetCacheCount(System.Int32)">
            <summary>
            Returns the number of items in the cache
            </summary>
            <param name="index">Index of cache</param>
            <returns>integer</returns>
        </member>
        <member name="F:Shared.Classes.CacheManagerFactory._dictionaryLockObject">
            <summary>
            List of all cache's created by application
            </summary>
        </member>
        <member name="T:Shared.Classes.CacheItem">
            <summary>
            Cached item
            
            Used by Cache manager for a cached item
            </summary>
        </member>
        <member name="M:Shared.Classes.CacheItem.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of cached item</param>
            <param name="value">Cached Item</param>
        </member>
        <member name="P:Shared.Classes.CacheItem.Created">
            <summary>
            Date/Time cache Item set
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheItem.LastUpdated">
            <summary>
            Date/Time cached item last updated
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheItem.Name">
            <summary>
            Name of cached item
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheItem.ResetMaximumAge">
            <summary>
            Reset's the age of the item when retrieved
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheItem.Value">
            <summary>
            Cached item
            </summary>
        </member>
        <member name="P:Shared.Classes.CacheItem.Index">
            <summary>
            Search index for fast lookup
            </summary>
        </member>
        <member name="M:Shared.Classes.CacheItem.GetValue(System.Boolean)">
            <summary>
            Returns the cached item
            </summary>
            <param name="ignoreReset">bool, if ResetMaximumAge is true and ignoreReset = false (default) then LastUpdated will be reset</param>
            <returns>CachedItem's value</returns>
        </member>
        <member name="T:Shared.Classes.CpuUsage">
            <summary>
            Class to get CPU Usage for current process
            </summary>
        </member>
        <member name="M:Shared.Classes.CpuUsage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Shared.Classes.CpuUsage.OtherProcessCPUUsage">
            <summary>
            Percentage of cpu usage within the process from unmanaged threads (including Main Thread)
            </summary>
        </member>
        <member name="P:Shared.Classes.CpuUsage.ThreadCPUChanged">
            <summary>
            One of the threads CPU Usage has changed when getting the stats
            </summary>
        </member>
        <member name="P:Shared.Classes.CpuUsage.EnoughTimePassed">
            <summary>
            Determines wether 500ms has passed or not
            </summary>
        </member>
        <member name="M:Shared.Classes.CpuUsage.ThreadAdd(Shared.Classes.ThreadManager)">
            <summary>
            Adds a thread to the list of threads being watched
            </summary>
            <param name="thread">Thread to start watching</param>
        </member>
        <member name="M:Shared.Classes.CpuUsage.ThreadRemove(Shared.Classes.ThreadManager)">
            <summary>
            Removes a thread from list of threads being watched
            </summary>
            <param name="thread">Thread to stop watching</param>
        </member>
        <member name="M:Shared.Classes.CpuUsage.ThreadUsageCount">
            <summary>
            Returns the number of threads being watched
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.CpuUsage.ThreadUsageGet(System.Int32)">
            <summary>
            Retrieves the n'th watched thread
            </summary>
            <param name="index">Index of thread being watched</param>
            <returns>ThreadUsage object</returns>
        </member>
        <member name="M:Shared.Classes.CpuUsage.GetProcessUsage">
            <summary>
            Retrieves the total process usage for the current process
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.CpuUsage.ThreadRemoveInternal(Shared.Classes.ThreadManager,System.Int32)">
            <summary>
            Removes a thread from list of threads being watched
            </summary>
            <param name="thread">Thread to stop watching</param>
            <param name="attempt">current attempt</param>
        </member>
        <member name="T:Shared.Classes.FileBackup">
            <summary>
            Backup File Class
            </summary>
        </member>
        <member name="M:Shared.Classes.FileBackup.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="folders">List of folders to watch/monitor</param>
        </member>
        <member name="M:Shared.Classes.FileBackup.Run(System.Object)">
            <summary>
            Overridden Run Method
            </summary>
            <param name="parameters"></param>
            <returns>true if to continue, otherwise false to terminate the thread</returns>
        </member>
        <member name="M:Shared.Classes.FileBackup.Dispose">
            <summary>
            Dispose Method
            </summary>
        </member>
        <member name="T:Shared.Classes.ftp">
            <summary>
            FTP class
            </summary>
        </member>
        <member name="M:Shared.Classes.ftp.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="hostIP"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="bufferSize"></param>
            <param name="useBinary"></param>
            <param name="usePassive"></param>
            <param name="keepAlive"></param>
            <param name="port"></param>
        </member>
        <member name="M:Shared.Classes.ftp.Download(System.String,System.String)">
            <summary>
            Download File
            </summary>
            <param name="remoteFile"></param>
            <param name="localFile"></param>
        </member>
        <member name="M:Shared.Classes.ftp.Upload(System.String,System.String)">
            <summary>
            Upload File
            </summary>
            <param name="remoteFile"></param>
            <param name="localFile"></param>
        </member>
        <member name="M:Shared.Classes.ftp.Delete(System.String)">
            <summary>
            Delete File 
            </summary>
            <param name="deleteFile"></param>
        </member>
        <member name="M:Shared.Classes.ftp.Rename(System.String,System.String)">
            <summary>
            Rename File
            </summary>
            <param name="currentFileNameAndPath"></param>
            <param name="newFileName"></param>
        </member>
        <member name="M:Shared.Classes.ftp.CreateDirectory(System.String)">
            <summary>
            Create a New Directory on the FTP Server
            </summary>
            <param name="newDirectory"></param>
        </member>
        <member name="M:Shared.Classes.ftp.GetFileCreatedDateTime(System.String)">
            <summary>
            Get the Date/Time a File was Created
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.ftp.GetFileSize(System.String)">
            <summary>
            Get the Size of a File
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.ftp.DirectoryListSimple(System.String)">
            <summary>
            List Directory Contents File/Folder Name Only
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.ftp.DirectoryListDetailed(System.String)">
            <summary>
            List Directory Contents in Detail (Name, Size, Created, etc.)
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.ftp.ConnectionString">
            <summary>
            Builds a valid connection string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.ftp.RaiseFileUploadStart(System.String,System.Int64)">
            <summary>
            File upload start
            </summary>
            <param name="fileName"></param>
            <param name="fileSize"></param>
        </member>
        <member name="M:Shared.Classes.ftp.RaiseFileUpload(System.String,System.Int64)">
            <summary>
            File upload raise event
            </summary>
            <param name="fileName"></param>
            <param name="bytesSent"></param>
            <returns>true if to continue (not cancelled) otherwise false</returns>
        </member>
        <member name="M:Shared.Classes.ftp.RaiseFileUploadFinish(System.String,System.Int64,System.Boolean)">
            <summary>
            File upload end
            </summary>
            <param name="fileName"></param>
            <param name="bytesSent"></param>
            <param name="cancelled"></param>
        </member>
        <member name="E:Shared.Classes.ftp.FileUploadStart">
            <summary>
            File upload event
            </summary>
        </member>
        <member name="E:Shared.Classes.ftp.FileUpload">
            <summary>
            file Upload Progress event
            </summary>
        </member>
        <member name="E:Shared.Classes.ftp.FileUploadEnd">
            <summary>
            File upload end event
            </summary>
        </member>
        <member name="T:Shared.Classes.FTPEntry">
            <summary>
            FTP Entry
            </summary>
        </member>
        <member name="T:Shared.Classes.FTPEntry.EntryType">
            <summary>
            Entry Type
            </summary>
        </member>
        <member name="F:Shared.Classes.FTPEntry.EntryType.Unknown">
            <summary>
            Unknown Entry Type
            </summary>
        </member>
        <member name="F:Shared.Classes.FTPEntry.EntryType.File">
            <summary>
            Type is a file
            </summary>
        </member>
        <member name="F:Shared.Classes.FTPEntry.EntryType.Folder">
            <summary>
            Type is a folder
            </summary>
        </member>
        <member name="M:Shared.Classes.FTPEntry.#ctor(Shared.Classes.FTPEntry.EntryType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:Shared.Classes.FTPEntry.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Shared.Classes.FTPEntry.#ctor(System.String,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="size"></param>
        </member>
        <member name="P:Shared.Classes.FTPEntry.Type">
            <summary>
            Type of entry
            </summary>
        </member>
        <member name="P:Shared.Classes.FTPEntry.Name">
            <summary>
            Name (File or folder name)
            </summary>
        </member>
        <member name="P:Shared.Classes.FTPEntry.Size">
            <summary>
            File Size
            </summary>
        </member>
        <member name="M:Shared.Classes.FTPEntry.ParseFTPLine(System.String,Shared.Classes.FTPEntry@)">
            <summary>
            Parses an FTP line and returns an entry, if vald
            
            Only tested on FileZilla FTP Server
            </summary>
            <param name="line">Line to be parsed</param>
            <param name="entry">Entry to be returned if valid</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="T:Shared.Classes.LogScanner">
            <summary>
            Scans a log file
            </summary>
        </member>
        <member name="M:Shared.Classes.LogScanner.#ctor(Shared.Classes.LogFileType,System.String,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="logFileType">Type of log file</param>
            <param name="fileName">Log file name and path</param>
            <param name="lastPosition">Last position scanned within the file</param>
        </member>
        <member name="P:Shared.Classes.LogScanner.FileType">
            <summary>
            Type of log file
            </summary>
        </member>
        <member name="P:Shared.Classes.LogScanner.LogEntries">
            <summary>
            List of log entries
            </summary>
        </member>
        <member name="M:Shared.Classes.LogScanner.ProcessEntries">
            <summary>
            Begins processing of log file
            </summary>
            <returns>Position reached within the file</returns>
        </member>
        <member name="F:Shared.Classes.LogScanner.OnLineFound">
            <summary>
            Event raised when a new line entry is found
            </summary>
        </member>
        <member name="T:Shared.Classes.LogFileType">
            <summary>
            Type of log file
            </summary>
        </member>
        <member name="F:Shared.Classes.LogFileType.MailEnable">
            <summary>
            MailEnable log file
            </summary>
        </member>
        <member name="F:Shared.Classes.LogFileType.FileZilla">
            <summary>
            FileZilla Server Log Files
            </summary>
        </member>
        <member name="T:Shared.Classes.LogLine">
            <summary>
            Valid line from a log file
            </summary>
        </member>
        <member name="M:Shared.Classes.LogLine.#ctor(Shared.Classes.LogFileType,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for mailenable
            </summary>
            <param name="logFileType"></param>
            <param name="date"></param>
            <param name="time"></param>
            <param name="remoteIP"></param>
            <param name="agent"></param>
            <param name="account"></param>
            <param name="serverIPAddress"></param>
            <param name="serverPort"></param>
            <param name="method"></param>
            <param name="uRIStem"></param>
            <param name="uRIQuery"></param>
            <param name="serverName"></param>
            <param name="serverBytes"></param>
            <param name="clientBytes"></param>
            <param name="userName"></param>
        </member>
        <member name="M:Shared.Classes.LogLine.#ctor(Shared.Classes.LogFileType,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.DateTime">
            <summary>
            Log entry date/time
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.RemoteIP">
            <summary>
            Remote IP Address
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.Agent">
            <summary>
            User agent
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.Account">
            <summary>
            Account
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.ServerIPAddress">
            <summary>
            Server IP Address
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.ServerPort">
            <summary>
            Server Port
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.URIStem">
            <summary>
            URIStem
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.URIQuery">
            <summary>
            URIQuery
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.ServerName">
            <summary>
            Server Name
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.ServerBytes">
            <summary>
            Server Bytes
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.ClientBytes">
            <summary>
            Client Bytes
            </summary>
        </member>
        <member name="P:Shared.Classes.LogLine.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="T:Shared.Classes.NVPCodec">
            <summary>
            Name / Value Pair Collection
            </summary>
        </member>
        <member name="M:Shared.Classes.NVPCodec.Encode">
            <summary>
            Returns the built NVP string of all name/value pairs in the Name Value Collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.NVPCodec.Decode(System.String)">
            <summary>
            Decoding the string
            </summary>
            <param name="nvpstring"></param>
        </member>
        <member name="M:Shared.Classes.NVPCodec.Add(System.String,System.String,System.Int32)">
            <summary>
            Adds a new Name/Value pair at specific index
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Shared.Classes.NVPCodec.Remove(System.String,System.Int32)">
            <summary>
            Removes a name value pair
            </summary>
            <param name="arrayName"></param>
            <param name="index"></param>
        </member>
        <member name="P:Shared.Classes.NVPCodec.Item(System.String,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Shared.Classes.Parameters">
            <summary>
            Static class for managing Application Params
            </summary>
        </member>
        <member name="F:Shared.Classes.Parameters._parameters">
            <summary>
            Dictionary of parameters
            </summary>
        </member>
        <member name="F:Shared.Classes.Parameters._caseSensitive">
            <summary>
            Case sensitive argument names
            </summary>
        </member>
        <member name="F:Shared.Classes.Parameters._lockObject">
            <summary>
            Lock object
            </summary>
        </member>
        <member name="M:Shared.Classes.Parameters.Initialise(System.String[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Initialises the parameters
            </summary>
            <param name="args">Appliction arguments
            
            i.e. /t  /o:option -i iOption</param>
            <param name="paramSeperators">Parameter seperators
            
            i.e. / or -
            </param>
            <param name="optionSeperators">Parameters that seperate options after an argument
            
            i.e. : or space</param>
            <param name="caseSensitiveArgName">Indicates whether argument names are case sensitive</param>
        </member>
        <member name="M:Shared.Classes.Parameters.Initialise(System.String[],System.Char,System.Char,System.Boolean)">
            <summary>
            Initialises the parameters
            </summary>
            <param name="args">Appliction arguments
            
            i.e. /t  /o:option -i iOption</param>
            <param name="paramSeperator">Parameter seperators
            
            i.e. / or -
            </param>
            <param name="optionSeperator">Parameters that seperate options after an argument
            
            i.e. : or space</param>
            <param name="caseSensitiveArgName">Indicates wether argument names are case sensitive</param>
        </member>
        <member name="M:Shared.Classes.Parameters.Finalise">
            <summary>
            Finalises the dictionary
            </summary>
        </member>
        <member name="M:Shared.Classes.Parameters.OptionExists(System.String)">
            <summary>
            Determines wether a parameter exists
            </summary>
            <param name="paramName">parameter name
            
            does not include the parameter seperator i.e. - or /</param>
            <returns>Parameter value if found, otherwise defaultValue</returns>
        </member>
        <member name="M:Shared.Classes.Parameters.GetOption(System.String,System.String)">
            <summary>
            Retrieves a parameter value
            </summary>
            <param name="paramName">parameter name
            
            does not include the parameter seperator i.e. - or /</param>
            <param name="defaultValue">Default value if not found</param>
            <returns>Parameter value if found, otherwise defaultValue</returns>
        </member>
        <member name="M:Shared.Classes.Parameters.GetOption(System.String,System.Boolean)">
            <summary>
            Retrieves a parameter value
            </summary>
            <param name="paramName">parameter name
            
            does not include the parameter seperator i.e. - or /</param>
            <param name="defaultValue">Default value if not found</param>
            <returns>Parameter value if found, otherwise defaultValue</returns>
        </member>
        <member name="M:Shared.Classes.Parameters.GetOption(System.String,System.Double)">
            <summary>
            Retrieves a parameter value
            </summary>
            <param name="paramName">parameter name
            
            does not include the parameter seperator i.e. - or /</param>
            <param name="defaultValue">Default value if not found</param>
            <returns>Parameter value if found, otherwise defaultValue</returns>
        </member>
        <member name="M:Shared.Classes.Parameters.GetOption(System.String,System.Int64)">
            <summary>
            Retrieves a parameter value
            </summary>
            <param name="paramName">parameter name
            
            does not include the parameter seperator i.e. - or /</param>
            <param name="defaultValue">Default value if not found</param>
            <returns>Parameter value if found, otherwise defaultValue</returns>
        </member>
        <member name="M:Shared.Classes.Parameters.GetOption(System.String,System.Int32)">
            <summary>
            Retrieves a parameter value
            </summary>
            <param name="paramName">parameter name
            
            does not include the parameter seperator i.e. - or /</param>
            <param name="defaultValue">Default value if not found</param>
            <returns>Parameter value if found, otherwise defaultValue</returns>
        </member>
        <member name="M:Shared.Classes.Parameters.GetOption(System.String,System.UInt32)">
            <summary>
            Retrieves a parameter value
            </summary>
            <param name="paramName">parameter name
            
            does not include the parameter seperator i.e. - or /</param>
            <param name="defaultValue">Default value if not found</param>
            <returns>Parameter value if found, otherwise defaultValue</returns>
        </member>
        <member name="M:Shared.Classes.Parameters.ProcessArgs(System.String[],System.Char,System.Char)">
            <summary>
            converts string[] to dictionary
            </summary>
            <param name="args">Appliction arguments
            
            i.e. /t  /o:option -i iOption</param>
            <param name="paramSeperator">Parameter seperators
            
            i.e. / or -
            </param>
            <param name="optionSeperator">Parameters that seperate options after an argument
            
            i.e. : or space (' ')</param>
        </member>
        <member name="M:Shared.Classes.Parameters.ProcessArgs(System.String[],System.Char[],System.Char[])">
            <summary>
            converts string[] to dictionary
            </summary>
            <param name="args">Appliction arguments
            
            i.e. /t  /o:option -i iOption</param>
            <param name="paramSeperators">Parameter seperators
            
            i.e. / or -
            </param>
            <param name="optionSeperators">Parameters that seperate options after an argument
            
            i.e. : or space (' ')</param>
        </member>
        <member name="M:Shared.Classes.Parameters.StartsWithSeperator(System.String,System.Char[])">
            <summary>
            Determines wether a string starts with a seperator
            </summary>
            <param name="s">string to check</param>
            <param name="seperators">array of seperators</param>
            <returns>true if it starts with otherwise false</returns>
        </member>
        <member name="M:Shared.Classes.Parameters.ContainsSeperator(System.String,System.Char[],System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="seperators"></param>
            <param name="beginString"></param>
            <param name="endString"></param>
            <returns></returns>
        </member>
        <member name="T:Shared.Classes.ThreadManager">
            <summary>
            Thread Management class
            
            Manages threads, includes thread queing, basic statistics for thread on Process and System % CPU usage
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._monitorCPUUsage">
            <summary>
            Determines wether cpu usage is monitored for this thread
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._prevThreadTotal">
            <summary>
            Previous Thread Time (Kernal/User)
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._thread">
            <summary>
            Actual thread object
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._delayStart">
            <summary>
            Indicates wether the thread should delay starting in milliseconds
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._cancel">
            <summary>
            Indicates that the thread should cancel
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._unresponsive">
            <summary>
            flag to indicate wether the thread was unresponsive or not
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._cancelTimeoutMilliseconds">
            <summary>
            Number of milliseconds to wait for time out
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._cancelRequested">
            <summary>
            Date/time cancel thread requested
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._parameters">
            <summary>
            Thread parameters
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._markedForRemoval">
            <summary>
            Indicates the thread is marked for removal from the collection
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._lastCommunication">
            <summary>
            DateTime of last communication from the thread, it's upto the thread to 
            update this value and it *could* be used to determine that the thread has
            timed out
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._lastRun">
            <summary>
            Date/Time thread last executed
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._parentThread">
            <summary>
            Parent Thread, if set
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._childThreads">
            <summary>
            All child threads
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadManager.#ctor(System.Object,System.TimeSpan,Shared.Classes.ThreadManager,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parameters">Paramaters to be passed to the thread</param>
            <param name="runInterval">Frequency which the thread will run</param>
            <param name="parent">Parent ThreadManager object, if there is one</param>
            <param name="delayStart">Number of milliseconds to delay the starting of the thread when run</param>
            <param name="sleepInterval">Number of milliseconds the thread should sleep for after running (Minimum 0 maximum 2000)</param>
            <param name="runAtStart">Indicates wether the thread should run straight away (after delayStart value) or should wait for the first iteration of runInterval
            
            If runInterval is quite long, i.e. 30 minutes and runAtStart is false then the first time the thread would run would be after 30 minutes</param>
            <param name="monitorCPUUsage">if true cpu usage for the thread will be monitored both for system and process percentage</param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.CancelThread(System.Int32,System.Boolean)">
            <summary>
            Indicates that the thread should cancel
            </summary>
            <param name="timeout">Number of milliseconds to wait for the thread to close before it is forced to close, 
            default to 10 seconds</param>
            <param name="isUnResponsive">Indicates wether the thread is unresponsive or not</param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.Abort">
            <summary>
            Indicates the thread should abort
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadManager.CancelChildren">
            <summary>
            Request to cancel all child threads
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadManager.ToString">
            <summary>
            Returns a string describing the Thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.ThreadManager.ThreadRun(System.Object)">
            <summary>
            Thread execution method
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.Run(System.Object)">
            <summary>
            Method overridden in descendant class which will execute within the thread
            </summary>
            <param name="parameters">An object that contains data for the thread procedure</param>
            <returns>true if the thread is to continue, false will casue the thread to terminate</returns>
        </member>
        <member name="M:Shared.Classes.ThreadManager.HasCancelled">
            <summary>
            Determines wether the thread has been asked to cancel
            
            Descendant objects should check this and if set to true should quit doing whatever they are doing
            </summary>
            <returns>true if cancel has been requested, otherwise false</returns>
        </member>
        <member name="M:Shared.Classes.ThreadManager.IndicateNotHanging">
            <summary>
            Descendant threads can call this method to show they are still "active"
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadManager.Ping">
            <summary>
            Long running threads will be pinged every 30 seconds to ensure they are not hanging
            
            Descendants should override and call IndicateNotHanging() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.ThreadManager.UpdateThreadUsage(System.Int64,System.Int64,System.TimeSpan)">
            <summary>
            Updates the thread usage, called internally
            </summary>
            <param name="processTotal">Total Process Time</param>
            <param name="systemTotal">Total System Time</param>
            <param name="threadTotal">Total Thread Time</param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.RaiseOnException(System.Exception)">
            <summary>
            Raises an exception event
            </summary>
            <param name="error">Exception being raised</param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.RaiseThreadStart(Shared.Classes.ThreadManager)">
            <summary>
            Raises a thread start event
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.RaiseThreadFinished(Shared.Classes.ThreadManager)">
            <summary>
            Raises a thread finish event
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.RaiseThreadCancelRequested(Shared.Classes.ThreadManager)">
            <summary>
            Event raised to indicate Thread has been requested to cancel
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.RaiseThreadCancelChildrenRequested(Shared.Classes.ThreadManager)">
            <summary>
            Event raised to indicate all child threads have been requested to cancel
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.GetThreadMemoryUsage">
            <summary>
            Get's the memory usage for the thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.ThreadManager.GetThreadTimes(System.TimeSpan@)">
            <summary>
            Retrieves the Total Thread Time
            </summary>
            <param name="threadTotal">TimeSpan of total time</param>
            <returns>True if retrieved, otherwise false</returns>
        </member>
        <member name="P:Shared.Classes.ThreadManager.Cancelled">
            <summary>
            Indicates wether the thread has been cancelled or not
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.TimeStart">
            <summary>
            Date/time thread started
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.TimeFinish">
            <summary>
            Date/time thread finished running
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ContinueIfGlobalException">
            <summary>
            if true and an unhandled error occurs then the thread will 
            still continue to run
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.RunAtStartup">
            <summary>
            If true then the thread will run straight away, if false then thread will wait for RunInterval
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.RunInterval">
            <summary>
            How often the thread should run
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.SleepInterval">
            <summary>
            Number of milliseconds the thread should sleep after running
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.Name">
            <summary>
            Name of the thread
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.MarkedForRemoval">
            <summary>
            Indicates the thread is finished and should be marked for removal from the collection
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ThreadID">
            <summary>
            Retrieves the thread ID
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ID">
            <summary>
            Actual Managed ID for thread being watched
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.UnResponsive">
            <summary>
            Indicates wether the thread was unresponsive or not
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.HangTimeout">
            <summary>
            Hang Timeout for running thread
            
            A value of 0 (zero) indicates the thread will not be checked for hanging
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ChildThreads">
            <summary>
            Collectin of child threads
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.Parent">
            <summary>
            Parent thread object
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.LastRun">
            <summary>
            Date/Time the thread Run method was executed
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ProcessCpuUsage">
            <summary>
            Threads usage within the process
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.SystemCpuUsage">
            <summary>
            Threads usage within the system
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.PreviousSystemCpuUsage">
            <summary>
            Previous System CPU Usage
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.PreviousProcessCpuUsage">
            <summary>
            Previous CPU Usage
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.CPUUsageChanged">
            <summary>
            CPU Usage has changed
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadStarting">
            <summary>
            Event raised when the thread starts
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadFinishing">
            <summary>
            Event raised when the thread finishes
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ExceptionRaised">
            <summary>
            Event raised when an exception occurs
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadCancelChildrenRequested">
            <summary>
            Event raised when child threads have been requested to cancel
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadCancelRequested">
            <summary>
            Event raised when a Thread has been requested to cancel
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._cpuUsage">
            <summary>
            CPU Usage object
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._threadList">
            <summary>
            List of managed threads
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._threadPool">
            <summary>
            Thread pool to hold threads if MaximumRunningThreads is exceeded
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._abortPool">
            <summary>
            List of threads to abort
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._countOfThreads">
            <summary>
            Number of managed threads
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._lockObject">
            <summary>
            Object used for exclusive locking
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._threadManager">
            <summary>
            Thread which manages the other threads in the list
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._threadAbortManager">
            <summary>
            Thread to abort other threads
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._threadCacheManager">
            <summary>
            Cache Manager for all Threads
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._globalCancelRequested">
            <summary>
            Indicates all threadshave been requested to cancel
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._maximumRunningThreads">
            <summary>
            Maximum number of threads that can be run
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._allowThreadsToPool">
            <summary>
            Determines wether a thread pool is available or not
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._maximumThreadPoolSize">
            <summary>
            Maximum number of waiting threads in the thread pool
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._threadHangTimeoutMinutes">
            <summary>
            Total number of minutes to wait before determining a thread is hanging 
            if it fails to communicate
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._checkForHangingThreads">
            <summary>
            Indicates wether checks for hanging threads (those that do not
            communicate in a timely fashion) are made, or not
            </summary>
        </member>
        <member name="F:Shared.Classes.ThreadManager._threadCPUChangeNotification">
            <summary>
            Event raised if thread cpu usage changes by this amount
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadExceptionRaised">
            <summary>
            Event raised when an exception occurs
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadForcedToClose">
            <summary>
            Event raised when a thread is forced to close
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadAbortForced">
            <summary>
            Event raised when a thread Abort is forced
            
            Indicates the threads internal Abort method was called but it failed to work so thread.abort() was being called
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadStarted">
            <summary>
            Thread has started
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadStopped">
            <summary>
            Thread has stopped running
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadQueueAddItem">
            <summary>
            Thread has been added to the queue
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadQueueRemoveItem">
            <summary>
            Thread has been removed from the queue
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadQueueCleared">
            <summary>
            Event raised when the thread queue is cleared
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadCancellAll">
            <summary>
            Event raised when Cancel all threads is called
            </summary>
        </member>
        <member name="E:Shared.Classes.ThreadManager.ThreadCpuChanged">
            <summary>
            Event raised when cpu usage for a thread changes by designated amount
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadManager.Get(System.Int32)">
            <summary>
            Retrieves the Nth thread in the list
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Classes.ThreadManager.Exists(System.String)">
            <summary>
            Checks wether a thread with a specific name already exists within the managed threads
            </summary>
            <param name="name">Name of Thread
            
            Exact match which is case sensistive</param>
            <returns>true if thread exists, otherwise false</returns>
        </member>
        <member name="M:Shared.Classes.ThreadManager.Find(System.String)">
            <summary>
            Checks wether a thread with a specific name exists and if so returns it
            </summary>
            <param name="name">Name of Thread
            
            Exact match which is case sensistive</param>
            <returns>ThreadManager object if thread exists, otherwise null</returns>
        </member>
        <member name="M:Shared.Classes.ThreadManager.ThreadStart(Shared.Classes.ThreadManager,System.String,System.Threading.ThreadPriority)">
            <summary>
            Initiates a thread and adds it to a thread pool
            </summary>
            <param name="thread">ThreadManager descendant which will be run in a thread</param>
            <param name="name">Name of the thread</param>
            <param name="priority">Priority of thread</param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.ThreadStart(Shared.Classes.ThreadManager,System.String,System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Initiates a thread and adds it to a thread pool
            </summary>
            <param name="thread">ThreadManager descendant which will be run in a thread</param>
            <param name="name">Name of the thread</param>
            <param name="priority">Priority of thread</param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.Initialise">
            <summary>
            Initialises all ThreadManager objects
            
            Called once at startup
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadManager.Finalise">
            <summary>
            Finalises all ThreadManager objects
            
            Called once at finish
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadManager.Cancel(System.String)">
            <summary>
            Cancel's a running thread
            </summary>
            <param name="name">Name of the thread</param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.CancelAll(System.Int32)">
            <summary>
            Cancel's all threads, requesting that they close
            </summary>
            <param name="timeOutSeconds">Number of seconds to wait for all threads to finish</param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.UpdatePriority(System.Threading.ThreadPriority)">
            <summary>
            Set's the priority for all threads
            </summary>
            <param name="priority">Priority to be applied</param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.ThreadStart(Shared.Classes.ThreadManager,System.String,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Starts a new thread
            </summary>
            <param name="thread"></param>
            <param name="name"></param>
            <param name="priority"></param>
            <param name="addToList"></param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.thread_ThreadFinishing(System.Object,Shared.ThreadManagerEventArgs)">
            <summary>
            Event method to remove from list of threads
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.RaiseThreadQueueRemoveItem(Shared.Classes.ThreadManager)">
            <summary>
            Raises the thread queue remove item event
            </summary>
            <param name="thread"></param>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ThreadCount">
            <summary>
            Returns the number of active threads
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ThreadPoolCount">
            <summary>
            Indicates the size of the thread pool
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.CancelRequested">
            <summary>
            Indicates that a request to cancel all threads has been made
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.MaximumRunningThreads">
            <summary>
            Sets the maximum number of threads that can be run 
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.CheckForHangingThreads">
            <summary>
            Determines wether checks are made for hanging threads, those that
            do not play nicely with others or appear incommunacative
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.AllowThreadPool">
            <summary>
            Determines wether a thread pool is in operation
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.MaximumPoolSize">
            <summary>
            Maximum size of the thread pool
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ThreadHangTimeout">
            <summary>
            Number of minutes a thread will timeout if it does not communicate and is deemed to have hanged
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.CpuUsage">
            <summary>
            Retrieves the CPU Usage for the process
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ProcessCpuOther">
            <summary>
            Process usage for other threads, including Main Process thread and unmanaged threads
            </summary>
        </member>
        <member name="P:Shared.Classes.ThreadManager.ThreadCpuChangeNotification">
            <summary>
            Raises an event if Thread CPU usage changes by given percentage
            
            0 = no notification
            50 is maximum value
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadManager.RaiseThreadForcedToClose(Shared.Classes.ThreadManager)">
            <summary>
            Event raised when a thread is forced to close
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.RaiseThreadAbortForced(Shared.Classes.ThreadManager)">
            <summary>
            Indicates a thread was being forced to Abort
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:Shared.Classes.ThreadManager.RaiseThreadCpuChanged">
            <summary>
            Raises an event to indicate the % of cpu usage for a thread has chenged by a specific amount
            </summary>
        </member>
        <member name="T:Shared.Classes.ThreadAbortManager">
            <summary>
            Thread to abort other threads
            
            Threads are given an opportunity to abort nicely, if they don't then
            they will be forced to abort
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadAbortManager.#ctor">
            <summary>
            Constructor, initialises to run thread every 1 second with a delay of 2 seconds between runs
            </summary>
        </member>
        <member name="T:Shared.Classes.ThreadCacheManager">
            <summary>
            thread that clears cached values
            </summary>
        </member>
        <member name="T:Shared.Classes.ThreadManagerManager">
            <summary>
            Class that manages the threads within the thread manager
            </summary>
        </member>
        <member name="M:Shared.Classes.ThreadManagerManager.#ctor">
            <summary>
            Constructor, initialises to run thread every 1 second with a delay of 0 seconds between runs
            </summary>
        </member>
        <member name="T:Shared.Classes.TimedLock">
            <summary>
            Timed lock 
            </summary>
        </member>
        <member name="F:Shared.Classes.TimedLock._maxAttempts">
            <summary>
            Maximum Attempts at obtaining a lock
            </summary>
        </member>
        <member name="P:Shared.Classes.TimedLock.MaximumAttempts">
            <summary>
            Maximum number of attempts to obtain lock
            </summary>
        </member>
        <member name="M:Shared.Classes.TimedLock.Lock(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="o">lock object</param>
            <returns>TimedLock instance</returns>
        </member>
        <member name="M:Shared.Classes.TimedLock.Lock(System.Object,System.TimeSpan)">
            <summary>
            Constructor
            </summary>
            <param name="o">lock object</param>
            <param name="timeout">timeout in seconds</param>
            <returns>TimedLock instance</returns>
        </member>
        <member name="M:Shared.Classes.TimedLock.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Shared.Classes.TimedLock.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="T:Shared.Classes.LockTimeoutException">
            <summary>
            Lock Timeout exception class
            </summary>
        </member>
        <member name="M:Shared.Classes.LockTimeoutException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Shared.Classes.UserSessionManager">
            <summary>
            UserSessionManager
            
            Class to manage user web sessions
            </summary>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.Run(System.Object)">
            <summary>
            Thread run method
            </summary>
            <param name="parameters">Thread parameters</param>
            <returns>true if execution should continue, otherwise false</returns>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.CancelThread(System.Int32,System.Boolean)">
            <summary>
            Thread Cancel Method
            </summary>
            <param name="timeout"></param>
            <param name="isUnResponsive"></param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.SessionCreated(Shared.Classes.UserSession)">
            <summary>
            Raises the sesssion created event for any listners
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.InitialiseSession(Shared.Classes.UserSession)">
            <summary>
            Called in a seperate thread, updates thread with basic data to stop blocking
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.GetReferralType(Shared.Classes.UserSession)">
            <summary>
            Determines the Referal Type for the sesssion
            </summary>
            <param name="session">Session</param>
            <returns>Referral Type</returns>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.FinaliseSession(Shared.Classes.UserSession)">
            <summary>
            Session is closing, are we saving any data from it?
            </summary>
            <param name="session">Session being removed</param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.RaiseSessionCreated(Shared.Classes.UserSession)">
            <summary>
            Raises the session created event
            </summary>
            <param name="session">Session being created</param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.RaiseSessionClosing(Shared.Classes.UserSession)">
            <summary>
            Raises the sesssion closing method
            </summary>
            <param name="session">Session being closed</param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.RaiseSessionSave(Shared.Classes.UserSession)">
            <summary>
            Raises the session save method
            </summary>
            <param name="session">Session to be saved</param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.RaiseSavePage(Shared.Classes.UserSession,Shared.Classes.PageViewData)">
            <summary>
            Raises an event to save the page data
            </summary>
            <param name="session"></param>
            <param name="page"></param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.RaiseGetIPDetails(Shared.Classes.UserSession)">
            <summary>
            Raisess an event to obtain ip details 
            </summary>
            <param name="session">Session who's ip details need raising</param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.UpdateSession(Shared.Classes.UserSession)">
            <summary>
            
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.InitialiseSessionManager(System.TimeSpan)">
            <summary>
            Initialises the SessionManager
            </summary>
            <param name="sessionDuration">Duration of session</param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.Add(Shared.Classes.UserSession)">
            <summary>
            Add's a new session to the Session Manager
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager.Login(System.String,System.String,System.String,System.Int64)">
            <summary>
            Called after a user logs in to update the username and email for the live session
            </summary>
            <param name="sessionID"></param>
            <param name="username">Visitors Name</param>
            <param name="email">Visitors Email Address</param>
            <param name="userID">ID of current user</param>
        </member>
        <member name="M:Shared.Classes.UserSessionManager._userSessionManger_ItemRemoved(System.Object,Shared.CacheItemArgs)">
            <summary>
            Event called when a user session is removed from cache for inactivity etc
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Shared.Classes.UserSessionManager.Clone">
            <summary>
            Returns a cloned list of all user sessions
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSessionManager.UserSessions">
            <summary>
            Returns all cache manager items
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSessionManager.Count">
            <summary>
            Count of active user sessions
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSessionManager.Instance">
            <summary>
            Get's the active instance of the UserSessionManager
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSessionManager.StaticWebSite">
            <summary>
            Indicates wether it's a static website or not
            
            If set to false then country data will be retrieved from the database
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSessionManager.InitialiseWebsite">
            <summary>
            If true the website is automatically initialised, if false, the app is responsible
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSessionManager.SaveImmediately">
            <summary>
            If true, the page/session save is called immediately, if false, it is called within a thread
            </summary>
        </member>
        <member name="E:Shared.Classes.UserSessionManager.OnSessionCreated">
            <summary>
            Event raised after a user session has been created
            </summary>
        </member>
        <member name="E:Shared.Classes.UserSessionManager.OnSessionClosing">
            <summary>
            Event raised prior to a user session being closed
            
            Data can be saved at this point
            </summary>
        </member>
        <member name="E:Shared.Classes.UserSessionManager.OnSessionSave">
            <summary>
            Event raised when session data (full / partial) can be saved
            
            The IsDirty property will indicate which data needs saving, if true it hasn't been saved, if false it has been saved already
            </summary>
        </member>
        <member name="E:Shared.Classes.UserSessionManager.OnSessionRetrieve">
            <summary>
            Event raised when a session needs to be retrieved from the database
            </summary>
        </member>
        <member name="E:Shared.Classes.UserSessionManager.OnSavePage">
            <summary>
            Event raised when page view save is required
            </summary>
        </member>
        <member name="E:Shared.Classes.UserSessionManager.IPAddressDetails">
            <summary>
            Event raised when IP Address details are required
            </summary>
        </member>
        <member name="T:Shared.Classes.UserSession">
            <summary>
            User Session object
            
            Stores information about user sessions
            </summary>
        </member>
        <member name="F:Shared.Classes.UserSession.MobileCheck">
            <summary>
            Is Mobile Device
            </summary>
        </member>
        <member name="F:Shared.Classes.UserSession.MobileVersionCheck">
            <summary>
            Mobile Version
            </summary>
        </member>
        <member name="F:Shared.Classes.UserSession._pageViews">
            <summary>
            Primary page views
            </summary>
        </member>
        <member name="F:Shared.Classes.UserSession._pageViewLockObject">
            <summary>
            Private lock object for when adding pages
            </summary>
        </member>
        <member name="M:Shared.Classes.UserSession.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Shared.Classes.UserSession.#ctor(System.Int64,System.DateTime,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Shared.Classes.ReferalType,System.Boolean,System.Boolean,System.String,System.String,System.Int64,System.Int32,System.Int32,System.String,System.Decimal)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="created"></param>
            <param name="sessionID"></param>
            <param name="userAgent"></param>
            <param name="initialReferrer"></param>
            <param name="ipAddress"></param>
            <param name="hostName"></param>
            <param name="isMobile"></param>
            <param name="isBrowserMobile"></param>
            <param name="mobileRedirect"></param>
            <param name="referralType"></param>
            <param name="bounced"></param>
            <param name="isBot"></param>
            <param name="mobileManufacturer"></param>
            <param name="mobileModel"></param>
            <param name="userID"></param>
            <param name="screenWidth"></param>
            <param name="screenHeight"></param>
            <param name="saleCurrency"></param>
            <param name="saleAmount"></param>
        </member>
        <member name="P:Shared.Classes.UserSession.Created">
            <summary>
            Date/Time Session Created
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.Status">
            <summary>
            internal indicator on wether it's been processed by the UserSessionManger or not
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.SessionID">
            <summary>
            Unique Session ID
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.InternalSessionID">
            <summary>
            Internal session id
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.IPAddress">
            <summary>
            IP Address of User
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.HostName">
            <summary>
            Host computer name for user
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.UserAgent">
            <summary>
            User Agent
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.IsMobileDevice">
            <summary>
            Is mobile device
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.IsBrowserMobile">
            <summary>
            Is mobile device based on browser capabilities
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.MobileRedirect">
            <summary>
            Determines wether the user should be redirected to the mobile site
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.Referal">
            <summary>
            Type of referral for session
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.InitialReferrer">
            <summary>
            Initial referring website
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.Bounced">
            <summary>
            Bounced indicates wether the user came to the page and left the site without doing anything else
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.IsBot">
            <summary>
            User session is a bot
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.CityID">
            <summary>
            Unique ID for City information
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.CountryCode">
            <summary>
            Country for visitor
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.Region">
            <summary>
            Visitor Region
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.CityName">
            <summary>
            Visitor city
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.Latitude">
            <summary>
            Latitude for ip address
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.Longitude">
            <summary>
            Longitude for ip address
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.UserID">
            <summary>
            Id of current logged on user
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.UserName">
            <summary>
            Name of logged on user
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.UserEmail">
            <summary>
            Email for logged on user
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.UserGuid">
            <summary>
            Unique guid used to identify a user
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.UserBasketId">
            <summary>
            Users basket id
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.MobileManufacturer">
            <summary>
            Mobile device manufacturer
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.MobileModel">
            <summary>
            Mobile device model
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.ScreenWidth">
            <summary>
            Width of users screen
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.ScreenHeight">
            <summary>
            Height of users screen
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.Pages">
            <summary>
            List of pages visited by user
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.TotalTime">
            <summary>
            Total time in seconds the user has been viewing pages
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.CurrentPage">
            <summary>
            Current page being viewed
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.CurrentSale">
            <summary>
            Indicates the value of the current sale
            
            This value should be set when the website makes a sale
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.CurrentSaleCurrency">
            <summary>
            Current sale currency code
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.Tag">
            <summary>
            User defined object for storing other data
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.SaveStatus">
            <summary>
            Save status of data, to indicate wether the data requires saving, 
            is already saved or pending changes before being saved
            </summary>
        </member>
        <member name="P:Shared.Classes.UserSession.PageSaveStatus">
            <summary>
            Save Status of pages for session
            </summary>
        </member>
        <member name="M:Shared.Classes.UserSession.PageView(System.String,System.String,System.Boolean)">
            <summary>
            PageView is used whenever a user visits a page
            </summary>
            <param name="page">Current page being viewed</param>
            <param name="referrer">Current Referrer</param>
            <param name="isPostBack">Is Post Back</param>
        </member>
        <member name="M:Shared.Classes.UserSession.Clone">
            <summary>
            Creates a copy of the object
            </summary>
            <returns>Shallow cloned copy of the session</returns>
        </member>
        <member name="M:Shared.Classes.UserSession.Login(System.Int64,System.String,System.String)">
            <summary>
            Updates the user detail properties for the session
            </summary>
            <param name="userID">Unique ID for user</param>
            <param name="username">User's name</param>
            <param name="email">Email address for user</param>
        </member>
        <member name="M:Shared.Classes.UserSession.Sale(System.Decimal,System.String)">
            <summary>
            Updates the Sale figures properties for the session
            </summary>
            <param name="saleAmount">Amount sold</param>
            <param name="currencyCode">Currency Code</param>
        </member>
        <member name="M:Shared.Classes.UserSession.UpdateIPDetails(System.Int64,System.Decimal,System.Decimal,System.String,System.String,System.String)">
            <summary>
            Internally updates the IP Address details
            </summary>
            <param name="id">Unique ID for City Record</param>
            <param name="latitude">Latitude of IP Address</param>
            <param name="longitude">Longitude of IP Address</param>
            <param name="regionName">Region for IP Address</param>
            <param name="cityName">City for IP Address</param>
            <param name="countryCode">Country Code for IP Address</param>
        </member>
        <member name="M:Shared.Classes.UserSession.CheckIfMobileDevice(System.String)">
            <summary>
            Detects wether the user session is from a mobile device or not
            
            Stores the result as session state
            </summary>
            <param name="userAgent">User Agent</param>
            <returns>bool, true if mobile device, otherwise false</returns>
        </member>
        <member name="T:Shared.Classes.PageViewData">
            <summary>
            PageViewData
            
            Stores information on pages viewed by a user
            </summary>
        </member>
        <member name="M:Shared.Classes.PageViewData.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="url">url of page being visited</param>
            <param name="referringPage">referring page</param>
            <param name="isPostBack">bool is post back or not</param>
        </member>
        <member name="P:Shared.Classes.PageViewData.ID">
            <summary>
            Unique ID for record
            </summary>
        </member>
        <member name="P:Shared.Classes.PageViewData.URL">
            <summary>
            Page being viewed
            </summary>
        </member>
        <member name="P:Shared.Classes.PageViewData.TimeStamp">
            <summary>
            Time page viewed
            </summary>
        </member>
        <member name="P:Shared.Classes.PageViewData.TotalTime">
            <summary>
            Total time spent on page
            </summary>
        </member>
        <member name="P:Shared.Classes.PageViewData.Referrer">
            <summary>
            Referring web page, if any
            </summary>
        </member>
        <member name="P:Shared.Classes.PageViewData.IsPostBack">
            <summary>
            Indicates wether it's a post back or not
            </summary>
        </member>
        <member name="P:Shared.Classes.PageViewData.SaveStatus">
            <summary>
            Current save status of the page view
            </summary>
        </member>
        <member name="M:Shared.Classes.PageViewData.Saved">
            <summary>
            Called by application once the page data has been saved
            </summary>
        </member>
        <member name="T:Shared.Classes.InitialiseSessionThread">
            <summary>
            Initialises a session in a thread
            </summary>
        </member>
        <member name="M:Shared.Classes.InitialiseSessionThread.#ctor(Shared.Classes.UserSessionManager,Shared.Classes.UserSession)">
            <summary>
            Constructor
            </summary>
            <param name="manager"></param>
            <param name="session"></param>
        </member>
        <member name="M:Shared.Classes.InitialiseSessionThread.Run(System.Object)">
            <summary>
            Thread run method
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Shared.Classes.ReferalType">
            <summary>
            Referral Types
            </summary>
        </member>
        <member name="F:Shared.Classes.ReferalType.Unknown">
            <summary>
            Not a clue
            </summary>
        </member>
        <member name="F:Shared.Classes.ReferalType.Direct">
            <summary>
            User typed url directly into the browser
            </summary>
        </member>
        <member name="F:Shared.Classes.ReferalType.Organic">
            <summary>
            Referral from a search engine
            </summary>
        </member>
        <member name="F:Shared.Classes.ReferalType.Referal">
            <summary>
            From a.n. other website
            </summary>
        </member>
        <member name="F:Shared.Classes.ReferalType.Facebook">
            <summary>
            Referring agent was Facebook
            </summary>
        </member>
        <member name="F:Shared.Classes.ReferalType.Twitter">
            <summary>
            Referring agent was Twitter
            </summary>
        </member>
        <member name="F:Shared.Classes.ReferalType.Google">
            <summary>
            Referring agent was google
            </summary>
        </member>
        <member name="F:Shared.Classes.ReferalType.Yahoo">
            <summary>
            Referring agent was yahoo
            </summary>
        </member>
        <member name="F:Shared.Classes.ReferalType.Bing">
            <summary>
            Referring agent was Bing 
            </summary>
        </member>
        <member name="T:Shared.Classes.SessionStatus">
            <summary>
            Session Status
            </summary>
        </member>
        <member name="F:Shared.Classes.SessionStatus.Initialising">
            <summary>
            Initialising
            </summary>
        </member>
        <member name="F:Shared.Classes.SessionStatus.Updated">
            <summary>
            Updated
            </summary>
        </member>
        <member name="F:Shared.Classes.SessionStatus.Closing">
            <summary>
            About to be closed
            </summary>
        </member>
        <member name="F:Shared.Classes.SessionStatus.Continuing">
            <summary>
            Session has been reloaded for continuing
            </summary>
        </member>
        <member name="T:Shared.Classes.SaveStatus">
            <summary>
            Save status for current item
            </summary>
        </member>
        <member name="F:Shared.Classes.SaveStatus.Saved">
            <summary>
            Data has already been saved
            </summary>
        </member>
        <member name="F:Shared.Classes.SaveStatus.RequiresSave">
            <summary>
            Item is ready to be saved, no further updates anticipated
            </summary>
        </member>
        <member name="F:Shared.Classes.SaveStatus.Pending">
            <summary>
            Awaiting more information before save can proceed
            </summary>
        </member>
        <member name="T:Shared.Classes.WebClientEx">
            <summary>
            Extended WebClient object
            </summary>
        </member>
        <member name="M:Shared.Classes.WebClientEx.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="userAgent">User Agent</param>
        </member>
        <member name="M:Shared.Classes.WebClientEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Shared.Classes.WebClientEx.CookieContainer">
            <summary>
            Cookie Container
            </summary>
        </member>
        <member name="M:Shared.Classes.WebClientEx.Cookies(System.Uri)">
            <summary>
            Cookies
            </summary>
            <param name="uri">Uri for cookies</param>
            <returns>CookiesCollection</returns>
        </member>
        <member name="P:Shared.Classes.WebClientEx.UserAgent">
            <summary>
            User Agent
            </summary>
        </member>
        <member name="P:Shared.Classes.WebClientEx.Timeout">
            <summary>
            Timeout in seconds
            </summary>
        </member>
        <member name="P:Shared.Classes.WebClientEx.ResponseTime">
            <summary>
            Response Time for GetWebRequest
            </summary>
        </member>
        <member name="M:Shared.Classes.WebClientEx.GetWebRequest(System.Uri)">
            <summary>
            Get's a web request
            </summary>
            <param name="address"></param>
            <returns>Uri for request</returns>
        </member>
        <member name="M:Shared.Classes.WebClientEx.RefreshUserAgent">
            <summary>
            Randomly selects a new user agent from predetermined list
            </summary>
        </member>
        <member name="T:Shared.Communication.Email">
            <summary>
            Send email class
            </summary>
        </member>
        <member name="M:Shared.Communication.Email.#ctor">
            <summary>
            Constructor
            
            Reads settings from saved/encrypted file
            </summary>
        </member>
        <member name="M:Shared.Communication.Email.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor
            
            User defined details
            </summary>
            <param name="sender"></param>
            <param name="host"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="port"></param>
            <param name="ssl"></param>
        </member>
        <member name="M:Shared.Communication.Email.Save">
            <summary>
            Saves the email settings to file
            </summary>
        </member>
        <member name="M:Shared.Communication.Email.SendTestEmail">
            <summary>
            Send a test email 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.Email.SendEmail(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Sends and email with optional attachments
            </summary>
            <param name="senderName"></param>
            <param name="recipientName"></param>
            <param name="recipientEmail"></param>
            <param name="message"></param>
            <param name="subject"></param>
            <param name="isHtml"></param>
            <param name="attachments"></param>
            <returns></returns>
        </member>
        <member name="P:Shared.Communication.Email.Sender">
            <summary>
            Email Sender
            </summary>
        </member>
        <member name="P:Shared.Communication.Email.Host">
            <summary>
            Email Host
            </summary>
        </member>
        <member name="P:Shared.Communication.Email.Port">
            <summary>
            Port used to send emails
            </summary>
        </member>
        <member name="P:Shared.Communication.Email.User">
            <summary>
            Email user name
            </summary>
        </member>
        <member name="P:Shared.Communication.Email.Password">
            <summary>
            Email Password
            </summary>
        </member>
        <member name="P:Shared.Communication.Email.SSL">
            <summary>
            Indicates wether SSL is used for sending emails
            </summary>
        </member>
        <member name="M:Shared.Communication.SmtpHelper.TestConnection(System.String,System.Int32)">
            <summary>
            test the smtp connection by sending a HELO command
            </summary>
            <param name="smtpServerAddress"></param>
            <param name="port"></param>
        </member>
        <member name="T:Shared.Communication.HttpPost">
            <summary>
            Class to perform http post
            </summary>
        </member>
        <member name="M:Shared.Communication.HttpPost.Post(System.String,System.String,System.UInt32,Shared.Classes.NVPCodec,System.String,System.String)">
            <summary>
            Performs a post to a webpage
            </summary>
            <param name="url">url where data will be posted</param>
            <param name="parameters">Name value parameters
            
            Must be in the form NAME0=VALUE0 seperated by ampersand </param>
            <param name="timeout">Timeout in seconds for the request</param>
            <param name="additionalHeaders">Additional header values</param>
            <param name="userAgent">User agent to be sent with the request</param>
            <param name="contentType">Content type</param>
            <returns>string data returned by webpage</returns>
        </member>
        <member name="M:Shared.Communication.HttpPost.Post(System.String,Shared.Classes.NVPCodec,System.UInt32,Shared.Classes.NVPCodec)">
            <summary>
            Performs a post to a webpage
            </summary>
            <param name="url">url where data will be posted</param>
            <param name="parameters">Name value parameters</param>
            <param name="timeout">Timeout in seconds for the request</param>
            <param name="additionalHeaders">Additonal header values to be sent</param>
            <returns>text received from web page</returns>
        </member>
        <member name="M:Shared.Communication.HttpPost.Post(System.String,Shared.Classes.NVPCodec,System.UInt32,System.String,Shared.Classes.NVPCodec)">
            <summary>
            Performs a post to a webpage
            </summary>
            <param name="url"></param>
            <param name="parameters"></param>
            <param name="timeout"></param>
            <param name="userAgent"></param>
            <param name="additionalHeaders"></param>
            <returns></returns>
        </member>
        <member name="T:Shared.Communication.ConnectedClient">
            <summary>
            Represents a connected client
            </summary>
        </member>
        <member name="M:Shared.Communication.ConnectedClient.#ctor(System.String,System.Net.Sockets.TcpClient)">
            <summary>
            Constructor
            </summary>
            <param name="clientID">Client Connection</param>
            <param name="client">TCP Client object</param>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.ClientIP">
            <summary>
            Holds the client IP address
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.RandomPassword">
            <summary>
            Random password used for encrypting/decrypting user details
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.ClientID">
            <summary>
            Client ID for connection
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.Client">
            <summary>
            TCP Connection
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.ListenThread">
            <summary>
            Thread used to listen for messages from the client
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.ConnectionStarted">
            <summary>
            Returns the time the client connected
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.LastReceived">
            <summary>
            DateTime data was last received from the client
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.LastSent">
            <summary>
            Indicates when data was last sent to the client
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.LoggedIn">
            <summary>
            Indicates wether the client is logged in or not
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.IgnoreBroadcastMessages">
            <summary>
            Indicates wether the client wants to ignore broadcast messages or not.
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.BufferSize">
            <summary>
            Returns the buffer size specified by the client
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.LoginName">
            <summary>
            Name of the logged in user/client
            </summary>
        </member>
        <member name="P:Shared.Communication.ConnectedClient.UserData">
            <summary>
            User definded object for client
            </summary>
        </member>
        <member name="T:Shared.Communication.FileBufferSize">
            <summary>
            Available buffer sizes for transferring files
            </summary>
        </member>
        <member name="F:Shared.Communication.FileBufferSize.Size1024">
            <summary>
            1024 bytes
            </summary>
        </member>
        <member name="F:Shared.Communication.FileBufferSize.Size2048">
            <summary>
            2048 bytes
            </summary>
        </member>
        <member name="F:Shared.Communication.FileBufferSize.Size4096">
            <summary>
            4096 bytes
            </summary>
        </member>
        <member name="F:Shared.Communication.FileBufferSize.Size8192">
            <summary>
            8192 bytes
            </summary>
        </member>
        <member name="F:Shared.Communication.FileBufferSize.Size16384">
            <summary>
            16384 bytes
            </summary>
        </member>
        <member name="T:Shared.Communication.FileTransfer">
            <summary>
            Internal class used to transfer files between client/server
            </summary>
        </member>
        <member name="M:Shared.Communication.FileTransfer.ProcessClientFiles(Shared.Communication.MessageClient,Shared.Communication.Message)">
            <summary>
            Processes all file commands on behalf of the client
            </summary>
            <param name="client">MessageClient object</param>
            <param name="message">Message received</param>
        </member>
        <member name="M:Shared.Communication.FileTransfer.ProcessServerFiles(Shared.Communication.MessageServer,Shared.Communication.Message,Shared.Communication.ConnectedClient)">
            <summary>
            Process all file commands on behalf of the server
            </summary>
            <param name="server">MessageServer object</param>
            <param name="message">Message received</param>
            <param name="client">MessageClient object</param>
        </member>
        <member name="M:Shared.Communication.FileTransfer.ReceiveFile(System.Net.Sockets.TcpClient,System.String,System.UInt64,Shared.Communication.FileBufferSize)">
            <summary>
            Receives a file via tcp socket and saves it to specified location
            
            Client Side Only
            </summary>
            <param name="client">Client Tcp socket</param>
            <param name="FileName">Full Path/Name of file to be saved</param>
            <param name="FileSize">Size of file being transferred</param>        
            <param name="BufferSize">Size of buffer used to receive file</param>
        </member>
        <member name="M:Shared.Communication.FileTransfer.ReceiveFile(Shared.Communication.ConnectedClient,System.String,System.UInt64,Shared.Communication.FileBufferSize)">
            <summary>
            Receives a file via tcp socket and saves it to specified location
            
            Server Side Only
            </summary>
            <param name="client">ConnectedClient object representing the client</param>
            <param name="FileName">Full Path/Name of file to be saved</param>
            <param name="FileSize">Size of file being transferred</param>        
            <param name="BufferSize">Size of buffer used to receive file</param>
        </member>
        <member name="M:Shared.Communication.FileTransfer.SendFile(System.Net.Sockets.TcpClient,System.String,Shared.Communication.FileBufferSize)">
            <summary>
            Sends a file to a tcp client
            
            Client Side Only
            </summary>
            <param name="client">Client Tcp socket</param>
            <param name="FileName">Full Path/Name of file to be sent</param>
            <param name="BufferSize">Size of buffer used to receive file</param>
        </member>
        <member name="M:Shared.Communication.FileTransfer.SendFile(Shared.Communication.ConnectedClient,System.String,Shared.Communication.FileBufferSize)">
            <summary>
            Sends a file to a tcp client from the sever
            
            Server Side Only
            </summary>
            <param name="client">ConnectedClient object representing the client</param>
            <param name="FileName">Full Path/Name of file to be sent</param>
            <param name="BufferSize">Size of buffer used to receive file</param>
        </member>
        <member name="T:Shared.Communication.MessageType">
            <summary>
            Enumeration that define the type of message
            </summary>
        </member>
        <member name="F:Shared.Communication.MessageType.Error">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="F:Shared.Communication.MessageType.Warning">
            <summary>
            Warning Message
            </summary>
        </member>
        <member name="F:Shared.Communication.MessageType.Info">
            <summary>
            Information Message
            </summary>
        </member>
        <member name="F:Shared.Communication.MessageType.Acknowledge">
            <summary>
            Acknowledgement
            </summary>
        </member>
        <member name="F:Shared.Communication.MessageType.Command">
            <summary>
            Command message
            </summary>
        </member>
        <member name="F:Shared.Communication.MessageType.Broadcast">
            <summary>
            Broadcasts message to all clients
            </summary>
        </member>
        <member name="F:Shared.Communication.MessageType.File">
            <summary>
            File Transfer message
            </summary>
        </member>
        <member name="F:Shared.Communication.MessageType.User">
            <summary>
            Sends a message to an individual user
            </summary>
        </member>
        <member name="T:Shared.Communication.Message">
            <summary>
            Custom message used in communication
            </summary>
        </member>
        <member name="M:Shared.Communication.Message.#ctor(System.String,System.String,Shared.Communication.MessageType)">
            <summary>
            Constructor
            </summary>
            <param name="title">Title of message</param>
            <param name="contents">Content of message</param>
            <param name="type">message type</param>
        </member>
        <member name="P:Shared.Communication.Message.ClientID">
            <summary>
            Get Client ID of the connection as set by the server
            </summary>
        </member>
        <member name="P:Shared.Communication.Message.Type">
            <summary>
            Get/Set the type of message
            </summary>
        </member>
        <member name="P:Shared.Communication.Message.Title">
            <summary>
            Get/Set the title of the message
            </summary>
        </member>
        <member name="P:Shared.Communication.Message.Contents">
            <summary>
            Get/Set the content of the message
            </summary>
        </member>
        <member name="M:Shared.Communication.Message.SetClientID(System.String)">
            <summary>
            Methods used internally to set the client id
            </summary>
            <param name="ClientID">New Client ID</param>
        </member>
        <member name="M:Shared.Communication.Message.Command(System.String,System.String)">
            <summary>
            Creates a Command Message
            </summary>
            <param name="command">Command to be passed</param>
            <param name="parameters">Optional parameters to be passed in the body of the command Message</param>
            <returns>Message Object</returns>
        </member>
        <member name="M:Shared.Communication.Message.FeatureNotSupported(System.String)">
            <summary>
            Creates a Error Message for Feature Not Supported
            </summary>
            <param name="contents">Optional contents for message</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.Message.FileToStringMessage(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.Message.StringToMessage(System.String)">
            <summary>
            
            </summary>
            <param name="stringMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.Message.StringArrayToMessage(System.Char[])">
            <summary>
            Converts string array to message
            </summary>
            <param name="charArray"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.Message.MessageToStringArray(Shared.Communication.Message)">
            <summary>
            Converts message to string array
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.Message.CharToMessageType(System.Char)">
            <summary>
            Gets the message type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.Message.MessageTypeToChar(Shared.Communication.MessageType)">
            <summary>
            Converts message type to char
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Shared.Communication.MessageClient">
            <summary>
            Client object used for receiving messages
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.#ctor(System.Int32)">
            <summary>
            Constructor, used for localhost only
            </summary>
            <param name="port">Port to connect to</param>
        </member>
        <member name="M:Shared.Communication.MessageClient.#ctor(System.String,System.Int32)">
            <summary>
            Constructor, specify server ip address/name and port
            </summary>
            <param name="server">Server Name or IP Address</param>
            <param name="port">Port to connect to</param>
        </member>
        <member name="M:Shared.Communication.MessageClient.StartListening">
            <summary>
            Initialises the client and starts listening for messages from the server
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.StopListening">
            <summary>
            Disconnects and stops listening for messages
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.SendMessage(Shared.Communication.Message)">
            <summary>
            Send a message to the server
            </summary>
            <param name="message">Message to be sent</param>
        </member>
        <member name="M:Shared.Communication.MessageClient.SendFile(System.String)">
            <summary>
            Sends a file to the server
            </summary>
            <param name="FileName">File to be sent</param>
        </member>
        <member name="M:Shared.Communication.MessageClient.ReceiveFile(System.String)">
            <summary>
            Instructs the server to send a file
            
            Server must manage its own path system as only the file name will be sent
            </summary>
            <param name="FileName">Name of file to be sent by server</param>
        </member>
        <member name="M:Shared.Communication.MessageClient.HandleClientException(System.Exception)">
            <summary>
            Handles exceptions when handling client connections
            </summary>
            <param name="error">Exception raised</param>
            <returns>bool value</returns>
        </member>
        <member name="P:Shared.Communication.MessageClient.TimeOut">
            <summary>
            Set's a flag to indicate time out has occurred
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.sendMessage(Shared.Communication.Message)">
            <summary>
            Sends the message to the server
            </summary>
            <param name="message">Message to be sent</param>
        </member>
        <member name="P:Shared.Communication.MessageClient.IgnoreBroadcasts">
            <summary>
            Determines whether broadcast messages are ignored or not
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageClient.IsRunning">
            <summary>
            Returns true if the client is running and connected to the server
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageClient.ClientID">
            <summary>
            Returns the unique Client ID as identified by the server
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageClient.Server">
            <summary>
            Returns the server the client is connected to or ("Not Connected")
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageClient.IsConnected">
            <summary>
            Determines whether the client is connected to the server or not
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageClient.BufferSize">
            <summary>
            Secifies the buffer size for sending/receiving files files
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageClient.LoggedIn">
            <summary>
            Indicates whether the client is logged into the server or not
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseConnected">
            <summary>
            Raises client connected event
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseDisconnected">
            <summary>
            Raises client disconnected event
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseClientIDChanged">
            <summary>
            Raises client ID changed event
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseError(System.Exception)">
            <summary>
            Raises Internal error event handler
            </summary>
            <param name="error">Error that occured</param>
            <returns>bool true to continue false to stop the server</returns>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseLoginRequired(System.String)">
            <summary>
            Raise LoginRequired Event
            </summary>
            <param name="passwordCode">Random encryption password created by the server</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseLoginFailed">
            <summary>
            Raises login failed event
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseLoggedIn">
            <summary>
            Raises login success event
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseFileReceived(System.Object,Shared.Communication.TransferFileEventArgs)">
            <summary>
            Raises file received event
            
            Used to monitor progres of file being sent/received
            </summary>
            <param name="sender">sender object</param>
            <param name="e">ReceiveFileEventArgs event arguments</param>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseConnectionRefused">
            <summary>
            Raises connection refused event
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageClient.RaiseFileReceive(System.String)">
            <summary>
            Raises a FileReceive event
            </summary>
            <param name="FileName">Filename being received</param>
            <returns>Client should return a fully qualified path/file name of the file to be returned</returns>
        </member>
        <member name="E:Shared.Communication.MessageClient.MessageReceived">
            <summary>
            Event raised when a message is received
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.ClientIDChanged">
            <summary>
            Event raised when client id is changed
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.Connected">
            <summary>
            Event raised when a connection is successfully made
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.Disconnected">
            <summary>
            Event raised when a connection disconnects
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.OnError">
            <summary>
            Exception raised when an error occurs
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.ClientLogin">
            <summary>
            Exception raised when a client logs in
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.ClientLoginFailed">
            <summary>
            Event raised when a client login fails
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.ClientLoginSuccess">
            <summary>
            Event raised when a client succesfully logs in
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.FileReceive">
            <summary>
            Event raised when a file is about to be received
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.FileReceived">
            <summary>
            Event raised when a file has been received
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageClient.ConnectionRefused">
            <summary>
            Event raised when a client connection is refused
            </summary>
        </member>
        <member name="T:Shared.Communication.MessageClientListeningThread">
            <summary>
            Thread used to listen for client connections
            </summary>
        </member>
        <member name="T:Shared.Communication.InvalidProperty">
            <summary>
            Indicates a property is not valid in this context
            </summary>
        </member>
        <member name="T:Shared.Communication.ErrorEventArgs">
            <summary>
            Event Arguments for when an error occurs
            </summary>
        </member>
        <member name="M:Shared.Communication.ErrorEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="error"></param>
            <param name="allowContinue"></param>
        </member>
        <member name="P:Shared.Communication.ErrorEventArgs.Error">
            <summary>
            Exception being raised
            </summary>
        </member>
        <member name="P:Shared.Communication.ErrorEventArgs.Continue">
            <summary>
            Determines whether to continue or not
            </summary>
        </member>
        <member name="T:Shared.Communication.ClientAllowConnectEventArgs">
            <summary>
            Event Args for allowing/denying a client conenction
            </summary>
        </member>
        <member name="M:Shared.Communication.ClientAllowConnectEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ipAddress"></param>
        </member>
        <member name="P:Shared.Communication.ClientAllowConnectEventArgs.IPAddress">
            <summary>
            IP Address of client trying to connect
            </summary>
        </member>
        <member name="P:Shared.Communication.ClientAllowConnectEventArgs.Allow">
            <summary>
            Specify whether the client is allowed to connect (true) or deny the connection (false)
            </summary>
        </member>
        <member name="T:Shared.Communication.TransferFileEventArgs">
            <summary>
            Event arguments for transferring a file
            </summary>
        </member>
        <member name="F:Shared.Communication.TransferFileEventArgs.SPEED_FORMAT">
            <summary>
            Used when calculating speed of transfer
            </summary>
        </member>
        <member name="M:Shared.Communication.TransferFileEventArgs.#ctor(System.String)">
            <summary>
            Constructor, used when initialising transfer between client/server
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Shared.Communication.TransferFileEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor, used when initialising transfer between client/server
            </summary>
            <param name="fileName">Name of file being trnsferred</param>
            <param name="clientID">ID of client sending/receiving files</param>
        </member>
        <member name="M:Shared.Communication.TransferFileEventArgs.#ctor(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.Double)">
            <summary>
            Constructor, used when file transfer is in progress or transfer is complete
            </summary>
            <param name="fileName">Name of file being transferred</param>
            <param name="received">Number of bytes received/sent</param>
            <param name="total">Total bytes to receive/sent</param>
            <param name="timeTaken">Time taken to transfer file at current speed</param>
            <param name="transferRate">Number of bytes transferred per second</param>
        </member>
        <member name="M:Shared.Communication.TransferFileEventArgs.#ctor(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.Double,System.String)">
            <summary>
            Constructor, used when file transfer is in progress or transfer is complete within the server
            </summary>
            <param name="fileName">Name of file being transferred</param>
            <param name="received">Number of bytes received/sent</param>
            <param name="total">Total bytes to receive/sent</param>
            <param name="timeTaken">Time taken to transfer file at current speed</param>
            <param name="transferRate">Number of bytes transferred per second</param>
            <param name="clientID">ID of client sending/receiving file</param>
        </member>
        <member name="P:Shared.Communication.TransferFileEventArgs.ClientID">
            <summary>
            ClientID
            
            Only set server Side
            </summary>
        </member>
        <member name="P:Shared.Communication.TransferFileEventArgs.Received">
            <summary>
            Indicates the number of bytes sent/received
            </summary>
        </member>
        <member name="P:Shared.Communication.TransferFileEventArgs.Total">
            <summary>
            Returns the total number of bytes to send/receive
            </summary>
        </member>
        <member name="P:Shared.Communication.TransferFileEventArgs.Percentage">
            <summary>
            Returns the file download as a percentage
            </summary>
        </member>
        <member name="P:Shared.Communication.TransferFileEventArgs.FileName">
            <summary>
            Name of the file being transferred
            </summary>
        </member>
        <member name="P:Shared.Communication.TransferFileEventArgs.TimeTaken">
            <summary>
            Retrieves time span for how long the download/upload has taken
            </summary>
        </member>
        <member name="P:Shared.Communication.TransferFileEventArgs.TimeRemaining">
            <summary>
            Retrieves time span with time remaining
            </summary>
        </member>
        <member name="P:Shared.Communication.TransferFileEventArgs.TransferRate">
            <summary>
            Indicates the transfer speed, number of bytes per second
            </summary>
        </member>
        <member name="P:Shared.Communication.TransferFileEventArgs.TransferSpeed">
            <summary>
            Retrieves the transfer speed as a string (?? kb/s)
            </summary>
        </member>
        <member name="T:Shared.Communication.ClientEventArgs">
            <summary>
            Client event arguments
            </summary>
        </member>
        <member name="M:Shared.Communication.ClientEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor for client event args
            </summary>
            <param name="ipAddress">IP Address of client</param>
            <param name="clientID">Client ID</param>
        </member>
        <member name="P:Shared.Communication.ClientEventArgs.IPAddress">
            <summary>
            IP Address of client
            </summary>
        </member>
        <member name="P:Shared.Communication.ClientEventArgs.ClientID">
            <summary>
            Client ID
            </summary>
        </member>
        <member name="T:Shared.Communication.ClientLoginArgs">
            <summary>
            Arguments used for client login
            </summary>
        </member>
        <member name="M:Shared.Communication.ClientLoginArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor - Used Server Side
            </summary>
            <param name="ipAddress">IP Address of client</param>
            <param name="userName">Username returned by client</param>
            <param name="password">Password returned by client</param>
        </member>
        <member name="M:Shared.Communication.ClientLoginArgs.#ctor">
            <summary>
            Constructor - Used Client Side
            </summary>
        </member>
        <member name="P:Shared.Communication.ClientLoginArgs.IPAddress">
            <summary>
            IP Address of client trying to login
            </summary>
        </member>
        <member name="P:Shared.Communication.ClientLoginArgs.Username">
            <summary>
            Username for login
            </summary>
        </member>
        <member name="P:Shared.Communication.ClientLoginArgs.Password">
            <summary>
            Password for login
            </summary>
        </member>
        <member name="P:Shared.Communication.ClientLoginArgs.LoggedIn">
            <summary>
            Determines whether the client is logged in using Username/Password supplied (true = yes logged in)
            </summary>
        </member>
        <member name="T:Shared.Communication.ClientAllowConnectEventHandler">
            <summary>
            Delegate for allowing client connections
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.Communication.ErrorEventHandler">
            <summary>
            Delegare for handling Errors and exceptions
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.Communication.MessageReceivedEventHandler">
            <summary>
            Delegate for receiving messages
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="T:Shared.Communication.ClientEventHandler">
            <summary>
            Delegare for client event arguments
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.Communication.ClientLoginHandler">
            <summary>
            Delegate for client logins
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.Communication.FileReceivedHandler">
            <summary>
            Delegare for receiving files
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.Communication.MessageServer">
            <summary>
            TCP Server object
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageServer.#ctor(System.Int32)">
            <summary>
            Create a message server that listens on the indicated port
            </summary>
            <param name="port">Port to connect to</param>
        </member>
        <member name="M:Shared.Communication.MessageServer.SendMessage(Shared.Communication.Message,System.Boolean)">
            <summary>
            Sends a message to all connected clients (broadcast)
            </summary>
            <param name="message">Message to be sent</param>
            <param name="allClients">Indicates that all clients will receive the message</param>
        </member>
        <member name="M:Shared.Communication.MessageServer.Start(System.String)">
            <summary>
            Starts a new Message Server listening thread, with a specific name
            </summary>
            <param name="threadName"></param>
        </member>
        <member name="M:Shared.Communication.MessageServer.Start">
            <summary>
            Starts a new Message Server listening thread
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageServer.Stop">
            <summary>
            Stops the Server
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageServer.UserName(System.String)">
            <summary>
            Returns the logged in user name for a Client
            </summary>
            <param name="ClientID">Client ID of user logged in</param>
            <returns>Username of logged in client</returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.UserData(System.String)">
            <summary>
            retrieves user defined data for the client connection
            </summary>
            <param name="ClientID">Client ID</param>
            <returns>User defined object to be returned</returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.UserData(System.String,System.Object)">
            <summary>
            Sets user defined data for the client connection
            </summary>
            <param name="ClientID">Client ID</param>
            <param name="Data">Data to be saved with client connection</param>
        </member>
        <member name="P:Shared.Communication.MessageServer.Running">
            <summary>
            Indicates wether the server is running or not
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageServer.LoginRequird">
            <summary>
            Indicates wether clients need to login
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageServer.MaxClientConnections">
            <summary>
            Maximum number of Client Connections
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageServer.ClientTimeOut">
            <summary>
            Determintes the number of seconds the client received/sent data before timeout (0 = no limit)
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageServer.AcceptFiles">
            <summary>
            Determines wether the server accepts files or not
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageServer.MaximumFileSize">
            <summary>
            Maximum file size in bytes that the server will accept
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageServer.ClientDictionary">
            <summary>
            Returns the client dictionary
            </summary>
        </member>
        <member name="P:Shared.Communication.MessageServer.Port">
            <summary>
            Retrieves the port being used by Message Server
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageServer.sendMessage(System.String,System.Net.Sockets.TcpClient,Shared.Communication.Message)">
            <summary>
            Sends the actual message to individual client
            </summary>
            <param name="clientID">Client ID where message is sent to</param>
            <param name="client">client message to be sent to</param>
            <param name="message">message to be sent</param>
        </member>
        <member name="M:Shared.Communication.MessageServer.sendMessage(Shared.Communication.Message,System.String,System.Boolean)">
            <summary>
            Sends a message to an individual client based on logged on username
            </summary>
            <param name="message">Message to be sent to use</param>
            <param name="user">Name of user message is to be sent to</param>
            <param name="ignoreCase">Inidcates wether the case of the username should be </param>
        </member>
        <member name="M:Shared.Communication.MessageServer.IsRunning">
            <summary>
            Determines wether the server is running or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.ProcessCommand(Shared.Communication.Message,System.Boolean@)">
            <summary>
            Processes internal command messages from clients
            </summary>
            <param name="message">Message to process</param>
            <param name="exit">if true client thread should close</param>
            <returns>true if execution can continue, otherwise false (we handled it)</returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.HandleClientException(System.Exception,System.String,System.Net.Sockets.TcpClient)">
            <summary>
            Handles exceptions when handling client connections
            </summary>
            <param name="error">Exception raised</param>
            <param name="clientID">clientID when error raised</param>
            <param name="client">TCP Client for client that has caused/raised an exception</param>
            <returns>bool, true if exception handled, otherwise false</returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.ConnectedClientCount">
            <summary>
            Determines how many clients are currently connected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.ClientAddress(System.Net.Sockets.TcpClient)">
            <summary>
            Retrieves the clients ip address
            </summary>
            <param name="client">client who's ip address sought</param>
            <returns>ip address of client</returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseAllowClientConnect(System.String)">
            <summary>
            Raises event to indicates a client want to connects
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseClientConnected(System.String,System.String)">
            <summary>
            Raises the ClientConnected event handler
            </summary>
            <param name="ipAddress">IP Address of client</param>
            <param name="clientID">ClientID of client who is connecting</param>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseError(System.Exception)">
            <summary>
            Raises Internal error event handler
            </summary>
            <param name="error">Error that occured</param>
            <returns>bool true to continue false to stop the server</returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseClientDisconnected(System.String,System.String)">
            <summary>
            Raised the ClientDisconnected event handler
            </summary>
            <param name="IPAddress">IP Address of client that is disconnecting</param>
            <param name="ClientID">ClientID of client who is disconnecting</param>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseStarted">
            <summary>
            Raises the Started Event
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseStopped">
            <summary>
            Raises the stopped event
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseClientCommand(Shared.Communication.Message)">
            <summary>
            Raises Client Command event
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseOnLogin(System.String,System.String,System.String)">
            <summary>
            Raises an event to indicate the client wants to login
            </summary>
            <param name="IPAddress">IP Address of client</param>
            <param name="UserName">Username provided by client</param>
            <param name="Password">Password provided by client</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseFileReceived(System.Object,Shared.Communication.TransferFileEventArgs)">
            <summary>
            Raise a file received event
            
            Contains progess of file received/sent
            </summary>
            <param name="sender">sender object</param>
            <param name="e">ReceiveFileEventArgs</param>
        </member>
        <member name="M:Shared.Communication.MessageServer.RaiseFileReceive(System.String,System.String)">
            <summary>
            Raises a FileReceive event
            </summary>
            <param name="FileName">Filename being received</param>
            <param name="ClientID">ID of client requesting file transfer</param>
            <returns>Client should return a fully qualified path/file name of the file to be returned</returns>
        </member>
        <member name="E:Shared.Communication.MessageServer.ClientCommand">
            <summary>
            Event raised when a client command is received
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.MessageReceived">
            <summary>
            Event raised when a message is received
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.AllowClientConnect">
            <summary>
            Event raised when a client attempts to connect
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.ClientConnected">
            <summary>
            Event raised when a client connects
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.ClientDisconnected">
            <summary>
            Event raised when a client disconnects
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.Started">
            <summary>
            Event raised when the Message Server is started
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.Stopped">
            <summary>
            Event raised when the Message Server is stopped
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.OnError">
            <summary>
            Event raised when an exception is raised
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.ClientLogin">
            <summary>
            Event raised when a client logs in
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.FileReceive">
            <summary>
            Event raised when a file is about to be received
            </summary>
        </member>
        <member name="E:Shared.Communication.MessageServer.FileReceived">
            <summary>
            Event raised after a file is received
            </summary>
        </member>
        <member name="T:Shared.Communication.MessageServerClientConnectionThread">
            <summary>
            Internal thread used to listen for client connections
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageServerClientConnectionThread.Run(System.Object)">
            <summary>
            Thread body for listening for client connections
            </summary>
        </member>
        <member name="M:Shared.Communication.MessageServerClientConnectionThread.ClientAddress(System.Net.Sockets.TcpClient)">
            <summary>
            Retrieves the clients ip address
            </summary>
            <param name="client">client who's ip address sought</param>
            <returns>ip address of client</returns>
        </member>
        <member name="T:Shared.Communication.SendSMSTextMagic">
            <summary>
            Wrapper for Text Magic SMS Sending
            
            https://www.textmagic.com
            </summary>
        </member>
        <member name="M:Shared.Communication.SendSMSTextMagic.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="username"></param>
            <param name="key"></param>
        </member>
        <member name="P:Shared.Communication.SendSMSTextMagic.Username">
            <summary>
            Text Magic username
            </summary>
        </member>
        <member name="P:Shared.Communication.SendSMSTextMagic.Key">
            <summary>
            TextMagic Key
            </summary>
        </member>
        <member name="M:Shared.Communication.SendSMSTextMagic.SMSSend(System.String,System.String,System.String)">
            <summary>
            Sends an SMS message
            </summary>
            <param name="from">Sender account detail</param>
            <param name="telephone">Telephone to send to</param>
            <param name="message">Message to send</param>
            <returns></returns>
        </member>
        <member name="T:Shared.Docs.BaseDocument">
            <summary>
            Base Documentation
            </summary>
            <remarks>
            This class is used as a descendent for other classes with basic information which is shared between all
            </remarks>
        </member>
        <member name="P:Shared.Docs.BaseDocument.DocumentType">
            <summary>
            Type of document
            </summary>
            <value>DocumentType</value>
        </member>
        <member name="P:Shared.Docs.BaseDocument.AssemblyName">
            <summary>
            Name of assembly where the code is contained
            </summary>
            <value>string</value>
        </member>
        <member name="P:Shared.Docs.BaseDocument.NameSpaceName">
            <summary>
            Name of the namespace where the code is contained
            </summary>
            <value>string</value>
        </member>
        <member name="P:Shared.Docs.BaseDocument.Remarks">
            <summary>
            Any remarkable information for class, method, property type etc
            </summary>
        </member>
        <member name="T:Shared.Docs.Document">
            <summary>
            Contains documentation for a class/type or custom documentation
            </summary>
        </member>
        <member name="M:Shared.Docs.Document.#ctor(Shared.DocumentType,System.String@)">
            <summary>
            Constructor
            
            Other document types (Custom etc)
            </summary>
            <param name="documentType">DocumentType</param>
            <param name="fullMemberName">Full member name of assembly</param>
        </member>
        <member name="M:Shared.Docs.Document.#ctor(System.String@,System.String@)">
            <summary>
            Constructor
            
            Used when documenting an assembly
            </summary>
            <param name="assemblyName">Name of assembly</param>
            <param name="fullMemberName">Full member name of assembly</param>
        </member>
        <member name="M:Shared.Docs.Document.#ctor(Shared.DocumentType@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Constructor
            
            Used when documenting a class/type
            </summary>
            <param name="documentType">DocumentType</param>
            <param name="assemblyName">Name of assembly containing the class</param>
            <param name="namespaceName">Namespace where class can be found</param>
            <param name="className">Name of class</param>
            <param name="fullMemberName">Full member name of assembly</param>
        </member>
        <member name="P:Shared.Docs.Document.Title">
            <summary>
            Document Title
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.AcquisitionMethod">
            <summary>
            How class can be acquired (DI etc)
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.ClassName">
            <summary>
            Name of class
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.Summary">
            <summary>
            Summary for class
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.Returns">
            <summary>
            Return Value if required
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.Value">
            <summary>
            Value if required
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.Example">
            <summary>
            Example 
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.Constructors">
            <summary>
            Documented Construcors
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.Methods">
            <summary>
            Documented Methods
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.Properties">
            <summary>
            Documented Properties
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.Fields">
            <summary>
            Documented Fields
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.SortOrder">
            <summary>
            Sort order to be used for this item
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.ExampleUseage">
            <summary>
            Text for example useage
            </summary>
        </member>
        <member name="P:Shared.Docs.Document.Tag">
            <summary>
            Custom object for use by implementing class to hold any data.
            </summary>
        </member>
        <member name="T:Shared.Docs.DocumentBuilder">
            <summary>
            DocumentBuilder is used to load a documentation xml file
            </summary>
        </member>
        <member name="T:Shared.Docs.DocumentField">
            <summary>
            Represents a class Field
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentField.ClassName">
            <summary>
            Name of class where field belongs
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentField.FieldName">
            <summary>
            Name of field
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentField.Summary">
            <summary>
            Summary description of field
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentField.Value">
            <summary>
            Value of field
            </summary>
        </member>
        <member name="T:Shared.Docs.DocumentMethod">
            <summary>
            Class Method
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentMethod.ClassName">
            <summary>
            Name of class
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentMethod.MethodName">
            <summary>
            Name of method
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentMethod.Summary">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentMethod.Returns">
            <summary>
            Return type
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentMethod.Parameters">
            <summary>
            Parameters for method
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentMethod.Exceptions">
            <summary>
            Exceptions that can be raised within the method
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentMethod.IsConstructor">
            <summary>
            Determines if the method is a constructor
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentMethod.ExampleUseage">
            <summary>
            Example useage for method
            </summary>
        </member>
        <member name="T:Shared.Docs.DocumentProperty">
            <summary>
            Documentation for a property
            </summary>
        </member>
        <member name="M:Shared.Docs.DocumentProperty.#ctor(System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Constructor
            </summary>
            <param name="assemblyName">Asembly name</param>
            <param name="namespaceName">Namespace where property belongs</param>
            <param name="className">Name of class</param>
            <param name="propertyName">Name of property</param>
            <param name="fullMemberName">Full member name as supplied by C# compiler</param>
        </member>
        <member name="P:Shared.Docs.DocumentProperty.ClassName">
            <summary>
            Name of class where property belongs
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentProperty.PropertyName">
            <summary>
            Name of property
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentProperty.Summary">
            <summary>
            Summary Description
            </summary>
        </member>
        <member name="P:Shared.Docs.DocumentProperty.Value">
            <summary>
            Value of property
            </summary>
        </member>
        <member name="T:Shared.FileDownload">
            <summary>
            Class for downloading files from internet
            </summary>
        </member>
        <member name="P:Shared.FileDownload.Downloading">
            <summary>
            Indicates wether a download is in progress or not
            </summary>
        </member>
        <member name="M:Shared.FileDownload.Download(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initiates a file download
            </summary>
            <param name="SourceFile">Remote File from internet</param>
            <param name="DestinationFile">Local path/file name for downloaded file</param>
            <param name="sleepTime">Number of milliseconds to sleep whilst waiting for download</param>
            <param name="iterations">Number of sleep iterations to wait for file download</param>
        </member>
        <member name="T:Shared.DocumentType">
            <summary>
            Type of document
            </summary>
        </member>
        <member name="T:Shared.ToastEventType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Shared.ToastEventType.None">
            <summary>
            No Event
            </summary>
        </member>
        <member name="F:Shared.ToastEventType.Timeout">
            <summary>
            timeout
            </summary>
        </member>
        <member name="F:Shared.ToastEventType.Clicked">
            <summary>
            Clicked
            </summary>
        </member>
        <member name="F:Shared.ToastEventType.Focused">
            <summary>
            focused
            </summary>
        </member>
        <member name="F:Shared.ToastEventType.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="T:Shared.ColumnType">
            <summary>
            Type of Column
            </summary>
        </member>
        <member name="F:Shared.ColumnType.Decimal">
            <summary>
            Decimal Column Type
            </summary>
        </member>
        <member name="F:Shared.ColumnType.String">
            <summary>
            String Column Type
            </summary>
        </member>
        <member name="F:Shared.ColumnType.Integer">
            <summary>
            Integer Column Type
            </summary>
        </member>
        <member name="F:Shared.ColumnType.Int64">
            <summary>
            Long column type
            </summary>
        </member>
        <member name="F:Shared.ColumnType.Boolean">
            <summary>
            Bool Column Type
            </summary>
        </member>
        <member name="T:Shared.NotificationPosition">
            <summary>
            Position of notification Form
            </summary>
        </member>
        <member name="F:Shared.NotificationPosition.TopLeft">
            <summary>
            Top Left of active screen
            </summary>
        </member>
        <member name="F:Shared.NotificationPosition.TopRight">
            <summary>
            Top right of active screen
            </summary>
        </member>
        <member name="F:Shared.NotificationPosition.BottomLeft">
            <summary>
            Bottom Left of active screen
            </summary>
        </member>
        <member name="F:Shared.NotificationPosition.BottomRight">
            <summary>
            Bottom Right of active screen
            </summary>
        </member>
        <member name="T:Shared.NotificationEffect">
            <summary>
            Type of notification window
            </summary>
        </member>
        <member name="F:Shared.NotificationEffect.None">
            <summary>
            Notification just appears
            </summary>
        </member>
        <member name="F:Shared.NotificationEffect.FadeIn">
            <summary>
            Notification Window fades In and remains
            </summary>
        </member>
        <member name="F:Shared.NotificationEffect.FadeOut">
            <summary>
            Notification window appears and fades out
            </summary>
        </member>
        <member name="F:Shared.NotificationEffect.FadeInOut">
            <summary>
            Notification window fades in and fades out after xx seconds
            </summary>
        </member>
        <member name="F:Shared.NotificationEffect.Slide">
            <summary>
            Notification windows slides in to view
            </summary>
        </member>
        <member name="T:Shared.DatabaseConnectionType">
            <summary>
            Database Connection Type
            
            if used in int conversion, then the value is default port for server
            </summary>
        </member>
        <member name="F:Shared.DatabaseConnectionType.Firebird">
            <summary>
            Firebird
            </summary>
        </member>
        <member name="F:Shared.DatabaseConnectionType.MySQL">
            <summary>
            MySQL 
            </summary>
        </member>
        <member name="F:Shared.DatabaseConnectionType.MSSQL">
            <summary>
            Microsoft SQL Server
            </summary>
        </member>
        <member name="T:Shared.ValidationTypes">
            <summary>
            Type of Validation
            </summary>
        </member>
        <member name="F:Shared.ValidationTypes.CreditCard">
            <summary>
            Credit card validation check
            </summary>
        </member>
        <member name="F:Shared.ValidationTypes.IsNumeric">
            <summary>
            Is numeric input validation check
            </summary>
        </member>
        <member name="F:Shared.ValidationTypes.AlphaNumeric">
            <summary>
            Alpha numeric validation check
            </summary>
        </member>
        <member name="F:Shared.ValidationTypes.AtoZ">
            <summary>
            A to Z validation check
            </summary>
        </member>
        <member name="F:Shared.ValidationTypes.Name">
            <summary>
            Name validation check
            </summary>
        </member>
        <member name="F:Shared.ValidationTypes.CardValidFrom">
            <summary>
            Credit card valid from validation check
            </summary>
        </member>
        <member name="F:Shared.ValidationTypes.CardValidTo">
            <summary>
            Credit card valid to validation check
            </summary>
        </member>
        <member name="F:Shared.ValidationTypes.FileName">
            <summary>
            File name validation check
            </summary>
        </member>
        <member name="T:Shared.AcceptedCreditCardTypes">
            <summary>
            Credit Card Types
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.Visa">
            <summary>
            Visa card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.MasterCard">
            <summary>
            Master card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.VisaDebit">
            <summary>
            Visa Debit card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.AmericanExpress">
            <summary>
            American expres card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.DinersClub">
            <summary>
            Diners club card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.JCB">
            <summary>
            JCB card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.VisaMaster">
            <summary>
            Visa Master card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.Maestro">
            <summary>
            Maestro card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.Solo">
            <summary>
            Solo card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.Discover">
            <summary>
            Discover card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.Switch">
            <summary>
            Switch card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.CarteBlanch">
            <summary>
            Carte blance card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.InstaPayment">
            <summary>
            Insta payment card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.Laser">
            <summary>
            Laser card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.UnionPay">
            <summary>
            Union pay card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.KoreanLocal">
            <summary>
            Korean local card
            </summary>
        </member>
        <member name="F:Shared.AcceptedCreditCardTypes.BCGlobal">
            <summary>
            BC Global card
            </summary>
        </member>
        <member name="T:Shared.CaseType">
            <summary>
            Case Type
            </summary>
        </member>
        <member name="F:Shared.CaseType.Ignore">
            <summary>
            Ignore case type
            </summary>
        </member>
        <member name="F:Shared.CaseType.Upper">
            <summary>
            Upper case
            </summary>
        </member>
        <member name="F:Shared.CaseType.Lower">
            <summary>
            Lower case
            </summary>
        </member>
        <member name="F:Shared.CaseType.Proper">
            <summary>
            Proper case
            </summary>
        </member>
        <member name="T:Shared.ValidateRequestResult">
            <summary>
            Validate Request Results
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.NotInitialised">
            <summary>
            Initialise has not been called
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.Undetermined">
            <summary>
            State unknown
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.PossibleSQLInjectionAttack">
            <summary>
            Enough keywords to suggest may be a SQL injection attack
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.SQLInjectionAttack">
            <summary>
            Enough keywords to determine this is a SQL injection attack
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.PossibleSpiderBot">
            <summary>
            Determines that the request is probably generated from a spider or bot
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.SpiderBot">
            <summary>
            Determines that the request is generated from a spider or bot
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.PossibleHackAttempt">
            <summary>
            Enough keywords to suggest this maybe a hack attempt
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.HackAttempt">
            <summary>
            Enough keywords to determine this is a hack attempt
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.IPWhiteListed">
            <summary>
            IP Address is white listed
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.IPBlackListed">
            <summary>
            IP Address is black listed
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.SearchEngine">
            <summary>
            IP address is a search engine
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.InvalidLicence">
            <summary>
            Indicates the product licence is invalid
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.BanRequested">
            <summary>
            A Ban has been requested on the IP Address
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.SinglePortScanner">
            <summary>
            Connection is a port scanner for single port
            </summary>
        </member>
        <member name="F:Shared.ValidateRequestResult.MultiPortScanner">
            <summary>
            Connection is a multiple port scanner
            </summary>
        </member>
        <member name="T:Shared.AddressType">
            <summary>
            Address Type
            </summary>
        </member>
        <member name="F:Shared.AddressType.Fixed">
            <summary>
            Fixed address type, created by system
            </summary>
        </member>
        <member name="F:Shared.AddressType.HackerOrSQL">
            <summary>
            Address type is standard 
            </summary>
        </member>
        <member name="F:Shared.AddressType.FailedAudit">
            <summary>
            Address type is a failed audit
            </summary>
        </member>
        <member name="F:Shared.AddressType.UserDefined">
            <summary>
            User Defined address type
            </summary>
        </member>
        <member name="F:Shared.AddressType.FirebirdAudit">
            <summary>
            Firebird generated Audit
            </summary>
        </member>
        <member name="F:Shared.AddressType.MailEnableAudit">
            <summary>
            MailEnable Failed Audit
            </summary>
        </member>
        <member name="T:Shared.LicenceType">
            <summary>
            Type of licence
            </summary>
        </member>
        <member name="F:Shared.LicenceType.Domain">
            <summary>
            Licence is for a website domain, including subdomains
            </summary>
        </member>
        <member name="F:Shared.LicenceType.Server">
            <summary>
            Licence is for a server
            </summary>
        </member>
        <member name="F:Shared.LicenceType.Firebird">
            <summary>
            Licence is for Firebird
            </summary>
        </member>
        <member name="F:Shared.LicenceType.WebMonitor">
            <summary>
            Licence is for WebMonitor
            </summary>
        </member>
        <member name="F:Shared.LicenceType.GeoIP">
            <summary>
            License is for GeoIP
            </summary>
        </member>
        <member name="F:Shared.LicenceType.ServiceGuard">
            <summary>
            Licence is for Service Guard
            </summary>
        </member>
        <member name="F:Shared.LicenceType.FBTaskScheduler">
            <summary>
            Firebird Task Scheduler
            </summary>
        </member>
        <member name="F:Shared.LicenceType.ReplicationEngine">
            <summary>
            Replication Engine
            </summary>
        </member>
        <member name="T:Shared.CancelArgs">
            <summary>
            Cancel Event Handler Arguments
            </summary>
        </member>
        <member name="M:Shared.CancelArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Shared.CancelArgs.Cancel">
            <summary>
            Cancel Flag
            </summary>
        </member>
        <member name="T:Shared.CancelEventHandler">
            <summary>
            Cancel Event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.SchemaValidationArgs">
            <summary>
            Schema Validation, event raised when schema is mismatched between 2 databases
            </summary>
        </member>
        <member name="M:Shared.SchemaValidationArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Shared.SchemaValidationArgs.ObjectType">
            <summary>
            Type of Object
            </summary>
        </member>
        <member name="P:Shared.SchemaValidationArgs.ObjectName1">
            <summary>
            Name of Object 1
            </summary>
        </member>
        <member name="P:Shared.SchemaValidationArgs.ObjectName2">
            <summary>
            Name of Object 2
            </summary>
        </member>
        <member name="P:Shared.SchemaValidationArgs.ExistDifferentName">
            <summary>
            Similar object with different name found
            </summary>
        </member>
        <member name="P:Shared.SchemaValidationArgs.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Shared.SchemaValidationArgs.SQL">
            <summary>
            SQL
            </summary>
        </member>
        <member name="T:Shared.SchemaValidationHandler">
            <summary>
            Schema Validation Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.ToastNotificationArgs">
            <summary>
            Toast Notification Arguments
            </summary>
        </member>
        <member name="M:Shared.ToastNotificationArgs.#ctor(System.String,Shared.ToastEventType)">
            <summary>
            Constructor
            </summary>
            <param name="uniqueID"></param>
            <param name="eventType"></param>
        </member>
        <member name="P:Shared.ToastNotificationArgs.UniqueID">
            <summary>
            Unique ID
            </summary>
        </member>
        <member name="P:Shared.ToastNotificationArgs.EventType">
            <summary>
            Toast Event Type
            </summary>
        </member>
        <member name="T:Shared.ToastNotificationHandler">
            <summary>
            Toast Notification arguments
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.FileProgressArgs">
            <summary>
            File Progress Args
            </summary>
        </member>
        <member name="M:Shared.FileProgressArgs.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="fileName"></param>
            <param name="total"></param>
            <param name="sent"></param>
        </member>
        <member name="P:Shared.FileProgressArgs.Filename">
            <summary>
            Filename
            </summary>
        </member>
        <member name="P:Shared.FileProgressArgs.Total">
            <summary>
            Total File Size
            </summary>
        </member>
        <member name="P:Shared.FileProgressArgs.Sent">
            <summary>
            Bytes sent
            </summary>
        </member>
        <member name="T:Shared.FileProgressHandler">
            <summary>
            File Progress Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.AddToLogFileArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Shared.AddToLogFileArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Shared.AddToLogFileArgs.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:Shared.AddToLogFileHandler">
            <summary>
            Delegate for log file message
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.UserSessionArgs">
            <summary>
            Event arguments for User Session
            </summary>
        </member>
        <member name="M:Shared.UserSessionArgs.#ctor(Shared.Classes.UserSession)">
            <summary>
            Constructor
            </summary>
            <param name="session">UserSession class</param>
        </member>
        <member name="P:Shared.UserSessionArgs.Session">
            <summary>
            User Session
            </summary>
        </member>
        <member name="T:Shared.UserSessionHandler">
            <summary>
            User Session Event Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.UserSessionRequiredArgs">
            <summary>
            Event arguments for User Session
            </summary>
        </member>
        <member name="M:Shared.UserSessionRequiredArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sessionID">UserSession class</param>
        </member>
        <member name="P:Shared.UserSessionRequiredArgs.SessionID">
            <summary>
            unique Session ID
            </summary>
        </member>
        <member name="P:Shared.UserSessionRequiredArgs.Session">
            <summary>
            User Session
            </summary>
        </member>
        <member name="T:Shared.UserSessionRequiredHandler">
            <summary>
            User Session Event Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.UserPageViewArgs">
            <summary>
            Event arguments for User Page View
            </summary>
        </member>
        <member name="M:Shared.UserPageViewArgs.#ctor(Shared.Classes.UserSession,Shared.Classes.PageViewData)">
            <summary>
            Constructor
            </summary>
            <param name="session">UserSession class</param>
            <param name="page"></param>
        </member>
        <member name="P:Shared.UserPageViewArgs.Page">
            <summary>
            User Page View
            </summary>
        </member>
        <member name="P:Shared.UserPageViewArgs.Session">
            <summary>
            User Session
            </summary>
        </member>
        <member name="T:Shared.UserPageViewHandler">
            <summary>
            User Session Event Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.IpAddressArgs">
            <summary>
            Event arguments for User Session
            </summary>
        </member>
        <member name="M:Shared.IpAddressArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ipAddress">IP Address whose details are required</param>
        </member>
        <member name="P:Shared.IpAddressArgs.IPAddress">
            <summary>
            IP Address that data is required for
            </summary>
        </member>
        <member name="P:Shared.IpAddressArgs.CountryCode">
            <summary>
            Country for visitor
            </summary>
        </member>
        <member name="P:Shared.IpAddressArgs.Region">
            <summary>
            Visitor Region
            </summary>
        </member>
        <member name="P:Shared.IpAddressArgs.CityName">
            <summary>
            Visitor city
            </summary>
        </member>
        <member name="P:Shared.IpAddressArgs.Latitude">
            <summary>
            Latitude for ip address
            </summary>
        </member>
        <member name="P:Shared.IpAddressArgs.Longitude">
            <summary>
            Longitude for ip address
            </summary>
        </member>
        <member name="P:Shared.IpAddressArgs.IPUniqueID">
            <summary>
            Unique ID, if used, for the IP Address information
            </summary>
        </member>
        <member name="T:Shared.IpAddressHandler">
            <summary>
            Event Handler for obtaining ip Address
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.FileTransferStartArgs">
            <summary>
            Ftp File upload / download start
            </summary>
        </member>
        <member name="M:Shared.FileTransferStartArgs.#ctor(System.String,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="fileName">File being transferred</param>
            <param name="fileSize">Size of file</param>
        </member>
        <member name="P:Shared.FileTransferStartArgs.Filename">
            <summary>
            Name of file being transferred
            </summary>
        </member>
        <member name="P:Shared.FileTransferStartArgs.FileSize">
            <summary>
            Size of the file being transferred
            </summary>
        </member>
        <member name="T:Shared.FileTransferStartDelegate">
            <summary>
            Delegate for 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.FileTransferProgressArgs">
            <summary>
            Ftp File upload / download start
            </summary>
        </member>
        <member name="M:Shared.FileTransferProgressArgs.#ctor(System.String,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="fileName">File being transferred</param>
            <param name="bytesSent">Size of file</param>
        </member>
        <member name="P:Shared.FileTransferProgressArgs.Filename">
            <summary>
            Name of file being transferred
            </summary>
        </member>
        <member name="P:Shared.FileTransferProgressArgs.BytesSent">
            <summary>
            Size of the file being transferred
            </summary>
        </member>
        <member name="P:Shared.FileTransferProgressArgs.Cancel">
            <summary>
            Determines wether the operation was cancelled or not
            </summary>
        </member>
        <member name="T:Shared.FileTransferProgressDelegate">
            <summary>
            Delegate for 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.FileTransferEndArgs">
            <summary>
            Ftp File upload / download end
            </summary>
        </member>
        <member name="M:Shared.FileTransferEndArgs.#ctor(System.String,System.Int64,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="fileName">File being transferred</param>
            <param name="fileSize">Size of file</param>
            <param name="cancelled"></param>
        </member>
        <member name="P:Shared.FileTransferEndArgs.Filename">
            <summary>
            Name of file being transferred
            </summary>
        </member>
        <member name="P:Shared.FileTransferEndArgs.FileSize">
            <summary>
            Size of the file being transferred
            </summary>
        </member>
        <member name="P:Shared.FileTransferEndArgs.Cancelled">
            <summary>
            Determines wether file transfer was cancelled or not
            </summary>
        </member>
        <member name="T:Shared.FileTransferEndDelegate">
            <summary>
            Delegate for 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.CacheItemNotFoundArgs">
            <summary>
            cached item not found event args
            </summary>
        </member>
        <member name="M:Shared.CacheItemNotFoundArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of cached item</param>
        </member>
        <member name="P:Shared.CacheItemNotFoundArgs.Name">
            <summary>
            Name of cached item
            </summary>
        </member>
        <member name="P:Shared.CacheItemNotFoundArgs.CachedItem">
            <summary>
            New cached item, to be added to the list
            </summary>
        </member>
        <member name="T:Shared.CacheItemNotFoundDelegate">
            <summary>
            Event raised when a cached item is not found, providing a chance to get it and add it to the list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.CacheItemArgs">
            <summary>
            cached item not found event args
            </summary>
        </member>
        <member name="M:Shared.CacheItemArgs.#ctor(Shared.Classes.CacheItem)">
            <summary>
            Constructor
            </summary>
            <param name="item">Name of cached item</param>
        </member>
        <member name="P:Shared.CacheItemArgs.CachedItem">
            <summary>
            Cached item, to be added to the list
            </summary>
        </member>
        <member name="T:Shared.CacheItemDelegate">
            <summary>
            Event raised for a cached item 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.LogScannerArgs">
            <summary>
            cached item not found event args
            </summary>
        </member>
        <member name="M:Shared.LogScannerArgs.#ctor(System.String,Shared.Classes.LogLine)">
            <summary>
            Constructor
            </summary>
            <param name="fileName"></param>
            <param name="line"></param>
        </member>
        <member name="P:Shared.LogScannerArgs.FileName">
            <summary>
            File where entry generated
            </summary>
        </member>
        <member name="P:Shared.LogScannerArgs.Line">
            <summary>
            Cached item, to be added to the list
            </summary>
        </member>
        <member name="T:Shared.LogScannerDelegate">
            <summary>
            Event raised for a cached item 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.UpdateAvailableArgs">
            <summary>
            Update available event arguments
            </summary>
        </member>
        <member name="M:Shared.UpdateAvailableArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="productName">Name of product</param>
            <param name="updateAvailable">Indicates wether an update is available or not</param>
        </member>
        <member name="P:Shared.UpdateAvailableArgs.UpdateAvailable">
            <summary>
            Bool value which indicates wether an update is available or not
            </summary>
        </member>
        <member name="P:Shared.UpdateAvailableArgs.ProductName">
            <summary>
            Name of product
            </summary>
        </member>
        <member name="T:Shared.UpdateAvailableDelegate">
            <summary>
            Delegate for update available event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.ThreadManagerEventArgs">
            <summary>
            Thread manager event arguments
            </summary>
        </member>
        <member name="M:Shared.ThreadManagerEventArgs.#ctor(Shared.Classes.ThreadManager)">
            <summary>
            Constructor
            </summary>
            <param name="threadManager">ThreadManager instance</param>
        </member>
        <member name="P:Shared.ThreadManagerEventArgs.Thread">
            <summary>
            ThreadManager object
            </summary>
        </member>
        <member name="T:Shared.ThreadManagerEventDelegate">
            <summary>
            Delegate used in ThreadManager events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.ThreadManagerExceptionEventArgs">
            <summary>
            Thread manager exception event arguments
            </summary>
        </member>
        <member name="M:Shared.ThreadManagerExceptionEventArgs.#ctor(Shared.Classes.ThreadManager,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="threadManager">ThreadManager instance</param>
            <param name="error">Exception that was raised</param>
        </member>
        <member name="P:Shared.ThreadManagerExceptionEventArgs.Thread">
            <summary>
            ThreadManager object
            </summary>
        </member>
        <member name="P:Shared.ThreadManagerExceptionEventArgs.Error">
            <summary>
            Error being raised
            </summary>
        </member>
        <member name="T:Shared.ThreadManagerExceptionEventDelegate">
            <summary>
            Delegate used in ThreadManager exception events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.LogScannedArgs">
            <summary>
            Update available event arguments
            </summary>
        </member>
        <member name="M:Shared.LogScannedArgs.#ctor(System.String,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="fileName">Name of product</param>
            <param name="position">Indicates wether an update is available or not</param>
        </member>
        <member name="P:Shared.LogScannedArgs.Filename">
            <summary>
            Name of file being scanned
            </summary>
        </member>
        <member name="P:Shared.LogScannedArgs.Position">
            <summary>
            Position within file that scanning starts / ends
            </summary>
        </member>
        <member name="T:Shared.LogScannedDelegate">
            <summary>
            Delegate for update available event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Shared.Abstractions.ICacheManagerFactory">
            <summary>
            Cache manager factory for retrieving individual caches
            </summary>
        </member>
        <member name="M:Shared.Abstractions.ICacheManagerFactory.GetCacheIfExists(System.String)">
            <summary>
            Retreives a cache by name if it exists.
            </summary>
            <param name="cacheName">Name of cache to retrieve</param>
            <returns>CacheManager instance if found, otherwise null</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if cacheName is null or empty</exception>
        </member>
        <member name="M:Shared.Abstractions.ICacheManagerFactory.GetCache(System.String)">
            <summary>
            Retreives a cache by name if it exists.
            </summary>
            <param name="cacheName">Name of cache to retrieve</param>
            <returns>CacheManager instance if found, otherwise InvalidOperationException</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the cache does not exist</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if cacheName is null or empty</exception>
        </member>
        <member name="M:Shared.Abstractions.ICacheManagerFactory.CacheExists(System.String)">
            <summary>
            Determines whether a cache exists or not
            </summary>
            <param name="cacheName"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if cacheName is null or empty</exception>
        </member>
        <member name="M:Shared.Abstractions.ICacheManagerFactory.CreateCache(System.String,System.TimeSpan)">
            <summary>
            Creates an instance of CacheManager
            
            Maximum age will not be reset, Items can be cleared.
            </summary>
            <param name="cacheName">Name of cache, must be unique</param>
            <param name="maximumAge">Maximum age of items within the cache</param>
            <returns>CacheManager instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if cacheName is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if a cache by cacheName already exists</exception>
            
        </member>
        <member name="M:Shared.Abstractions.ICacheManagerFactory.CreateCache(System.String,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of CacheManager
            </summary>
            <param name="cacheName">Name of cache, must be unique</param>
            <param name="maximumAge">Maximum age of items within the cache</param>
            <param name="resetMaximumAge">Reset age of item when retrieved</param>
            <param name="allowClearAll">Allows the cache to be cleared automatically</param>
            <returns>CacheManager instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if cacheName is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if a cache by cacheName already exists</exception>
            
        </member>
        <member name="M:Shared.Abstractions.ICacheManagerFactory.RemoveCache(System.String)">
            <summary>
            Removes a cache, by name if it exists.
            </summary>
            <param name="cacheName">Name of cache, must be unique</param>
            <exception cref="T:System.ArgumentNullException">Thrown if cacheName is null or empty</exception>
        </member>
        <member name="M:Shared.Abstractions.ICacheManagerFactory.ClearAllCaches">
            <summary>
            Forces a clean up of all caches, removing all items.  This will not clear any cache manager instance where the AllowClearAll flag is set to false.
            </summary>
        </member>
        <member name="M:Shared.Abstractions.ICacheManagerFactory.CleanAllCaches">
            <summary>
            Forces a clean up of all caches, removing older items that have expired
            </summary>
        </member>
        <member name="T:Shared.EventLog">
            <summary>
            Event logging
            </summary>
        </member>
        <member name="F:Shared.EventLog._lockObject">
            <summary>
            object used for obtaining lock for multithreaded use
            </summary>
        </member>
        <member name="F:Shared.EventLog._errorCache">
            <summary>
            if error is reported more than once in an hour, ignore previous errors
            </summary>
        </member>
        <member name="F:Shared.EventLog._logCache">
            <summary>
            If a log item repeats more than once in 30 minutes, then ignore
            </summary>
        </member>
        <member name="F:Shared.EventLog._maximumFileSize">
            <summary>
            Maximum size of log/error file, after this is exceeded, nothing will be logged
            </summary>
        </member>
        <member name="F:Shared.EventLog._logPath">
            <summary>
            Path for log files
            </summary>
        </member>
        <member name="F:Shared.EventLog._errorPath">
            <summary>
            Path for error logs
            </summary>
        </member>
        <member name="M:Shared.EventLog.ArchiveOldLogFiles(System.Int32)">
            <summary>
            Archives old log files, older than days
            </summary>
            <param name="days">Age of file in days</param>
        </member>
        <member name="P:Shared.EventLog.MaximumFileSize">
            <summary>
            Maximum size of log/error file
            </summary>
        </member>
        <member name="M:Shared.EventLog.LogError(System.Reflection.MethodBase,System.Exception,System.Object[])">
            <summary>
            Logs an internal error
            </summary>
            <param name="method">Method where error occured</param>
            <param name="ex">Ecxeption being raised</param>
            <param name="values">Parameter values within the method</param>
            <returns>void</returns>
        </member>
        <member name="M:Shared.EventLog.LogError(System.Reflection.MethodBase,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="error"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.EventLog.Debug(System.String,System.String)">
            <summary>
            Debug only
            </summary>
            <param name="header"></param>
            <param name="s"></param>
        </member>
        <member name="M:Shared.EventLog.Debug(System.String)">
            <summary>
            Debug Only
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Shared.EventLog.Debug(System.Exception,System.String)">
            <summary>
            Debug Only
            </summary>
            <param name="e"></param>
            <param name="extraData"></param>
        </member>
        <member name="M:Shared.EventLog.Initialise(System.Int32)">
            <summary>
            Starts the thread log manager to manage log files
            </summary>
            <param name="maximumAge">Maximum age of log files</param>
            <returns>Path to log files</returns>
        </member>
        <member name="M:Shared.EventLog.Add(System.Exception,System.String)">
            <summary>
            Add's an exception to the event log
            </summary>
            <param name="e">Exception to add to log file</param>
            <param name="extraData">extra data to be added along with exception information</param>
        </member>
        <member name="M:Shared.EventLog.Add(System.String,System.String)">
            <summary>
            Adds text to the log file with a header prefixing the text
            
            Entry added in form of header - text
            </summary>
            <param name="header">Header</param>
            <param name="text">Text to add</param>
        </member>
        <member name="M:Shared.EventLog.Add(System.String)">
            <summary>
            Adds text to the log file
            </summary>
            <param name="text">text to add to log file</param>
        </member>
        <member name="M:Shared.EventLog.DebugText(System.String)">
            <summary>
            Adds text to the log file
            </summary>
            <param name="text">text to add to log file</param>
        </member>
        <member name="P:Shared.EventLog.Path">
            <summary>
            Get/Set the path of the event log file.
            </summary>
        </member>
        <member name="M:Shared.EventLog.GetPreviousErrorData(System.String,Shared.LoggingErrorCacheItem@)">
            <summary>
            Finds previous error data, if already exists, appends further occurrance data to the file,
            if not exists, creates the cache item
            </summary>
            <param name="error">error caused</param>
            <param name="errorItem"></param>
            <returns></returns>
        </member>
        <member name="P:Shared.LoggingErrorCacheItem.FileName">
            <summary>
            Error log file name
            </summary>
        </member>
        <member name="P:Shared.LoggingErrorCacheItem.NumberOfErrors">
            <summary>
            Number of times error has occurred
            </summary>
        </member>
        <member name="T:Shared.Logging.LoggingThread">
            <summary>
            Class which manages the error memory cache and the age of log files
            
            runs every 5 minutes
            </summary>
        </member>
        <member name="T:Shared.Utilities">
            <summary>
            Utilities class
            </summary>
        </member>
        <member name="M:Shared.Utilities.LongToIP(System.Int64)">
            <summary>
            Converts a Long to an IP Address
            </summary>
            <param name="longIP">long value</param>
            <returns>string - IP Address</returns>
        </member>
        <member name="M:Shared.Utilities.IPToLong(System.String)">
            <summary>
            Converts an IP Address to a long
            </summary>
            <param name="ip">IP Address</param>
            <returns>Long value representing the ip address</returns>
        </member>
        <member name="M:Shared.Utilities.LocalIPAddresses">
            <summary>
            Returns a list of all local network addresses
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.LocalIPAddress(System.String)">
            <summary>
            Determines wether an IP address is a local ip address
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.RandomString(System.Int32)">
            <summary>
            Creates a random string
            </summary>
            <param name="length">Length of string to create</param>
            <returns>Random string containing A-Z, a-z, 0-9</returns>
        </member>
        <member name="M:Shared.Utilities.RandomNumber(System.Int32,System.Int32)">
            <summary>
            Creates a random number
            </summary>
            <param name="min">Minimum Value for random number</param>
            <param name="max">Maximum value for random number</param>
            <returns>Random number between min and max</returns>
        </member>
        <member name="M:Shared.Utilities.GetRandomWord(System.Int32,System.String)">
            <summary>
            Generates a random word
            </summary>
            <param name="length"></param>
            <param name="AcceptableChars"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.CurrentPath(System.Boolean)">
            <summary>
            Returns the current path
            </summary>
            <param name="addTrailingBackSlash">Adds a trailing backslash</param>
            <returns>Path for current executable</returns>
        </member>
        <member name="M:Shared.Utilities.ConnectionStringValue(System.String,System.String)">
            <summary>
            Takes a connection string and returns a parameter value
            </summary>
            <param name="connectionString">Connection String</param>
            <param name="name">Name of parameter</param>
            <returns>Value of parameter, if found, otherwise empty string</returns>
        </member>
        <member name="M:Shared.Utilities.ProcessKill(System.String)">
            <summary>
            Kills all processes with filename
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.GetCurrencySymbol(System.String)">
            <summary>
            Gets the currency symbol for a specific culture
            </summary>
            <param name="Culture">Culture who's currency symbol is required</param>
            <returns>The currency symbol for the string</returns>
        </member>
        <member name="M:Shared.Utilities.GetCurrencySymbol(System.String,System.String@)">
            <summary>
            Gets the currency symbol for a specific culture
            </summary>
            <param name="Culture">Culture who's currency symbol is required</param>
            <param name="ISOSymbol">ISO Symbol</param>
            <returns>The currency symbol for the string</returns>
        </member>
        <member name="M:Shared.Utilities.GetCurrencySymbol(System.Globalization.CultureInfo)">
            <summary>
            Gets the currency symbol for a specific culture
            </summary>
            <param name="culture">Culture who's currency symbol is required</param>
            <returns>The currency symbol for the string</returns>
        </member>
        <member name="M:Shared.Utilities.GetCurrencySymbol(System.Globalization.CultureInfo,System.String@)">
            <summary>
            Gets the currency symbol for a specific culture
            </summary>
            <param name="Culture">Culture who's currency symbol is required</param>
            <param name="ISOSymbol">ISO Symbol</param>
            <returns>The currency symbol for the string</returns>
        </member>
        <member name="M:Shared.Utilities.FirstCharLower(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.TextMaxLength(System.String,System.UInt32)">
            <summary>
            Ensures a string does not exceed a maximum length, if it does, cut's it to maximum length required
            
            if value is null, returns String.Empty
            </summary>
            <param name="value">string to check</param>
            <param name="maxLength">Maximum Length</param>
            <returns>value, no longer than maxLength</returns>
        </member>
        <member name="M:Shared.Utilities.WordWrap(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="maxCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.RemoveDblQuotes(System.String)">
            <summary>
            Removes double quotes surrounding a string, if they exist
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.SplitCamelCase(System.String)">
            <summary>
            Splits a string into words using uppercase char as option to split
            </summary>
            <param name="s">String to split</param>
            <returns>string</returns>
        </member>
        <member name="M:Shared.Utilities.DoubleToDate(System.DateTime,System.Double)">
            <summary>
            Converts a double value to a time value
            </summary>
            <param name="date"></param>
            <param name="Time"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.DoubleToDate(System.DateTime,System.Double,System.Int32)">
            <summary>
            Converts a double value to a time value
            </summary>
            <param name="date"></param>
            <param name="Time"></param>
            <param name="Duration"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.DateToDouble(System.DateTime)">
            <summary>
            Converts the time element of a datetime object to a double value
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.TimeToDouble(System.DateTime)">
            <summary>
            Converts the time to a double
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.TimeToDouble(System.String)">
            <summary>
            Converts a string to a double 
            </summary>
            <param name="t">string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.DoubleToTime(System.Double)">
            <summary>
            Converts a double into a time
            </summary>
            <param name="d">Double to convert</param>
            <returns>string</returns>
        </member>
        <member name="M:Shared.Utilities.StrToInt64(System.String,System.Int64)">
            <summary>
            Converts a string to an Int64
            </summary>
            <param name="value">String to be converted</param>
            <param name="defaultValue">Default value if conversion fails</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.StrToInt(System.String,System.Int32)">
            <summary>
            Converts a string to a number
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.StrToIntDef(System.String,System.Int32)">
            <summary>
            Attempts to convert a string to an int value
            </summary>
            <param name="Value">Value to convert</param>
            <param name="DefaultValue">Default value to be returned if conversion fails</param>
            <returns>int value</returns>
        </member>
        <member name="M:Shared.Utilities.StrToInt64Def(System.String,System.Int64)">
            <summary>
            Converts a string to an Int64, provides a default value.
            </summary>
            <param name="Value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.StrToBool(System.String,System.Boolean)">
            <summary>
            Converts a string to a boolean value
            </summary>
            <param name="value">String value to convert</param>
            <param name="defaultValue">Default value if conversion fails</param>
            <returns>bool value</returns>
        </member>
        <member name="M:Shared.Utilities.StrToBool(System.String)">
            <summary>
            Converts a string to a bool with default value of false
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.StrToDateTime(System.String,System.String)">
            <summary>
            Converts a string to a date time using specified culture
            </summary>
            <param name="value">value to be converted</param>
            <param name="culture">Culture used in conversion</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.StrToDateTime(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to a date time using specified culture
            </summary>
            <param name="value">value to be converted</param>
            <param name="culture">Culture used in conversion</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.DateTimeToStr(System.DateTime,System.String)">
            <summary>
            Converts a date/time to a string using specified culture
            </summary>
            <param name="timeStamp"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.DateTimeToStr(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Converts a date/time to a string using specified culture
            </summary>
            <param name="timeStamp"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.StrIsCurrency(System.String,System.Decimal@)">
            <summary>
            Determines if a string value is a currency or not
            </summary>
            <param name="value">Value to be checked</param>
            <param name="val">retruned currency amount</param>
            <returns>true if currency otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.StrIsDate(System.String,System.DateTime@)">
            <summary>
            Determines wether the string passed is a date or not
            </summary>
            <param name="value">string value used to check if it's a date</param>
            <param name="val">Date value returned</param>
            <returns>true if it is a date format, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.StrIsDate(System.String,System.DateTime@,System.Globalization.CultureInfo)">
            <summary>
            Determines wether the string passed is a date or not
            </summary>
            <param name="value">string value used to check if it's a date</param>
            <param name="val">Date value returned</param>
            <param name="culture">Culture to use</param>
            <returns>true if it is a date format, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.StrIsNumeric(System.String,System.Int64@)">
            <summary>
            Looks at a string and determines wether it's a numeric value or not
            </summary>
            <param name="value">value to be checked</param>
            <param name="val">Value returned</param>
            <returns>true if it is numeric, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.BoolToStr(System.Boolean)">
            <summary>
            Converts a boolean value to a string
            </summary>
            <param name="b">boolean value to convert</param>
            <returns>String representation of the bool, in proper case</returns>
        </member>
        <member name="M:Shared.Utilities.StrToDecimal(System.String,System.Decimal,System.Globalization.CultureInfo)">
            <summary>
            Converts a string value to a decimal
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Value to be returned if conversion fails</param>
            <param name="cultureInfo">Culture used for converting string, if null the current thread's UI culture is used</param>
            <returns>Decimal representation of value if convertable, otherwise defaultValue</returns>
        </member>
        <member name="M:Shared.Utilities.StrToDblDef(System.String,System.Double)">
            <summary>
            Converts a string to a double
            </summary>
            <param name="Value">Value to convert</param>
            <param name="DefaultValue">Value to be returned if conversion fails</param>
            <returns>double</returns>
        </member>
        <member name="M:Shared.Utilities.StrToDbl(System.String)">
            <summary>
            Converts a string to a double
            </summary>
            <param name="Value">value to be converted</param>
            <returns>double</returns>
        </member>
        <member name="M:Shared.Utilities.StrToIntDef(System.String,System.Int64)">
            <summary>
            Converts a string to an Int64
            </summary>
            <param name="Value">Value to convert</param>
            <param name="DefaultValue">Value to be returned if conversion fails</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Shared.Utilities.StrToUInt(System.String,System.UInt32)">
            <summary>
            Converts a string to an uint
            </summary>
            <param name="Value">Value to convert</param>
            <param name="DefaultValue">Value to be returned if conversion fails</param>
            <returns>uint</returns>
        </member>
        <member name="M:Shared.Utilities.ConvertMinTomSecDef(System.String,System.String)">
            <summary>
            Converts minutes into miliseconds
            </summary>
            <param name="Minutes">time in minutes to be converted</param>
            <param name="Default">Default time</param>
            <returns>Converted value in miliseconds</returns>
        </member>
        <member name="M:Shared.Utilities.ConvertMinTomSecDef(System.Int32,System.Int32)">
            <summary>
            Converts minutes to Milliseconds
            </summary>
            <param name="Minutes">Minutes to convert</param>
            <param name="Default">Default value</param>
            <returns>Minutes converted to milliseconds</returns>
        </member>
        <member name="M:Shared.Utilities.TryParse(System.String)">
            <summary>
            Attempts to convert a string to int
            </summary>
            <param name="number">string that is attempted to be converted</param>
            <returns>true if the string can be converted to an int, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.ConvertmSecToMinDef(System.String,System.String)">
            <summary>
            Converts miliseconds into minutes
            </summary>
            <param name="Miliseconds">time in miliseconds to be converted</param>
            <param name="Default">Default time</param>
            <returns>Converted value in minutes</returns>
        </member>
        <member name="M:Shared.Utilities.StrToInt(System.String,System.Int16)">
            <summary>
            Converts a string to a shortint (Int16)
            </summary>
            <param name="Value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.FormatPhoneNumber(System.String)">
            <summary>
            Attempts to format a phone number for UK
            </summary>
            <param name="Telephone">Telephone number to format</param>
            <returns>Formatted telephone number</returns>
        </member>
        <member name="M:Shared.Utilities.IsValidEmail(System.String)">
            <summary>
            Determines wether a string contains a correctly formatted email or not
            
            This does not check wether the email address physically exists, only that
            it is correctly formatted, i.e. me@domain.com
            </summary>
            <param name="inputEmail">email address to check</param>
            <returns>true if correctly formatted email address, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.ConvertKMtoMiles(System.Double)">
            <summary>
            Converts Kilometres to Miles
            </summary>
            <param name="KM"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.ProperCase(System.String)">
            <summary>
            Converts a string to proper case
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.IsValidUKPostcode(System.String,System.String@)">
            <summary>
            Determines wether the postcode is a valid UK post code
            </summary>
            <param name="InPostCode"></param>
            <param name="PostCode"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.TimeToString(System.Int32)">
            <summary>
            Converts a time to a string value
            </summary>
            <param name="Time"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.DateToStr(System.DateTime,System.String)">
            <summary>
            Converts a date to a string using specified culture
            </summary>
            <param name="Value"></param>
            <param name="Culture"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.DateToStr(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Converts a date to a string using specified culture
            </summary>
            <param name="Value"></param>
            <param name="Culture"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.RandomPassword(System.Int32)">
            <summary>
            
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.GetRandomPassword(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <param name="acceptableCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.RemoveHTMLElements(System.String)">
            <summary>
            Removes some HTML Elements
            </summary>
            <param name="s">string containing html elements</param>
            <returns>string without html elements</returns>
        </member>
        <member name="M:Shared.Utilities.FileDeleteOlder(System.String,System.String,System.Int32)">
            <summary>
            Delete's files matching searchpattern, in folder which have not been accessed for maxDays
            </summary>
            <param name="folder">Folder to search</param>
            <param name="searchPattern">search Pattern</param>
            <param name="maxDays">Days since last accessed</param>
        </member>
        <member name="M:Shared.Utilities.FileSize(System.Int64,System.Int32)">
            <summary>
            Returns a description of the file size
            </summary>
            <param name="bytes">number of bytes</param>
            <param name="decimalPlaces">Number of decimal places to return</param>
            <returns>string</returns>
        </member>
        <member name="M:Shared.Utilities.FileSize(System.String)">
            <summary>
            Gets the size of a file
            </summary>
            <param name="fileName">Filename</param>
            <returns>number of bytes</returns>
        </member>
        <member name="M:Shared.Utilities.FileRename(System.String,System.String,System.String)">
            <summary>
            Rename's all files within a folder if the filename contains specific text
            
            e.g. FileRename("c:\\myfiles\\", " (2)", "_2");
            
            looks for any file with  (2) in the file name ("text file (2).txt") and renames 
            it to ("text file_2.txt")
            </summary>
            <param name="path">Path where files reside</param>
            <param name="findText">text to find within the filename</param>
            <param name="replaceText">text that will replace findText within the filename</param>
        </member>
        <member name="M:Shared.Utilities.FileCRC(System.String,System.Boolean)">
            <summary>
            Obtains a CRC for a given file
            </summary>
            <param name="fileName"></param>
            <param name="exclusiveAccess">Exclusive File Access or Not</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.DateFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the current date / time format based on culture
            </summary>
            <param name="includeTime">if true, includes short time</param>
            <param name="shortDate">if true short date, otherwise long date</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines wether value is between two values
            </summary>
            <param name="value">Value to Check</param>
            <param name="left">Left Value</param>
            <param name="right">Right Value</param>
            <returns>Bool if value between left and right</returns>
        </member>
        <member name="M:Shared.Utilities.MinimumValue(System.Int32,System.Int32)">
            <summary>
            Checks a value is at least Minimum
            </summary>
            <param name="Minimum">Minimum allowed value</param>
            <param name="Value">Value to be checked</param>
            <returns>int Value as long as it is above Minimum, otherwise Minimum</returns>
        </member>
        <member name="M:Shared.Utilities.RoundUp(System.Int32,System.Int32)">
            <summary>
            Rounds up an int value
            </summary>
            <param name="Total"></param>
            <param name="DivBy"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.IsRightToLeftCharacter(System.String)">
            <summary>
            Detects if any characters are right to left within a string
            </summary>
            <param name="s">string to check</param>
            <returns>true if any of the characters are right to left</returns>
        </member>
        <member name="M:Shared.Utilities.FormatDate(System.DateTime,System.String,System.String)">
            <summary>
            Formats a date for a specific culture
            </summary>
            <param name="date">Date/Time to be formatted</param>
            <param name="culture">Culture to be used</param>
            <param name="dateFormat">date format to be used</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.FormatText(System.String,System.String)">
            <summary>
            Format's text removing any characters not part of allowed characters param
            </summary>
            <param name="s">Text to format</param>
            <param name="allowedCharacters">Characters allowed</param>
            <returns>s Formatted</returns>
        </member>
        <member name="M:Shared.Utilities.ValueWithin(System.Int32,System.Int32,System.Int32)">
            <summary>
            enusres a int value is between minimum and maximum value
            </summary>
            <param name="minimum">Minimum int value</param>
            <param name="maximum">Maximum int value</param>
            <param name="value">Value being verified</param>
            <returns>Value between Minimum and Maximum</returns>
        </member>
        <member name="M:Shared.Utilities.MaximumLength(System.String,System.Int32)">
            <summary>
            Returns s to maximum length specified
            </summary>
            <param name="s"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.GetRandomPassword">
            <summary>
            Generates a random password which is 10 characters long
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.GetRandomKey">
            <summary>
            Generates a random key value in the form LLL-NNNNNN
            
            Where L is a letter and N is a number
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.Hash(System.String)">
            <summary>
            Creates a hash of a string
            
            From: https://stackoverflow.com/questions/8820399/c-sharp-4-0-how-to-get-64-bit-hash-code-of-given-string
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.HashStringMD5(System.String)">
            <summary>
            Converts a string to an MD5 value
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.BufferText(System.String,System.Int32)">
            <summary>
            Buffers text ensuring it's a specified length
            
            Appends spaces to the string
            </summary>
            <param name="Text">Text to buffer</param>
            <param name="Length">Required length</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.Percentage(System.Double,System.Double)">
            <summary>
            Calculates a percentage
            </summary>
            <param name="total">Total number available</param>
            <param name="current">current value</param>
            <returns>Percentage</returns>
        </member>
        <member name="M:Shared.Utilities.Percentage(System.Int32,System.Int32)">
            <summary>
            Calculates a percentage
            </summary>
            <param name="total">Total number available</param>
            <param name="current">current value</param>
            <returns>Percentage</returns>
        </member>
        <member name="M:Shared.Utilities.GetWeek">
            <summary>
            Returns the week number for today's date
            </summary>
            <returns>Week number</returns>
        </member>
        <member name="M:Shared.Utilities.GetWeek(System.DateTime)">
            <summary>
            Returns the week number for the date
            </summary>
            <param name="date">Date which the week number is sought</param>
            <returns>Week number</returns>
        </member>
        <member name="M:Shared.Utilities.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a string using key provided
            </summary>
            <param name="textToEncrypt">Text to encrypt</param>
            <param name="key">Key used to encrypt</param>
            <returns>Encrypted String</returns>
        </member>
        <member name="M:Shared.Utilities.Decrypt(System.String,System.String)">
            <summary>
            Decrypts an encrypted string 
            </summary>
            <param name="textToDecrypt">Text to decrypt</param>
            <param name="key">Key used to decrypt</param>
            <returns>Decrypted String</returns>
        </member>
        <member name="M:Shared.Utilities.EncryptDecrypt(System.String,System.Int32)">
            <summary>
            Simple encryption/decryption
            </summary>
            <param name="textToEncrypt">String to Encrypt/Decrypt</param>
            <param name="key">Key Value</param>
            <returns>If string is encrypted then decrypted string, othewise encrypted string</returns>
        </member>
        <member name="M:Shared.Utilities.Encrypt(System.String)">
            <summary>
            Simple string encryption
            </summary>
            <param name="InStr"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.Decrypt(System.String)">
            <summary>
            Simple string decryption
            </summary>
            <param name="InStr"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.DateWithin(System.DateTime,System.Int32)">
            <summary>
            Determines wether the date falls within a number of days from current date
            </summary>
            <param name="date">date to check</param>
            <param name="Range">Number of days allowed</param>
            <returns>true if date is within Range number of days, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.DateWithin(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Checks to see if a date falls between 2 other dates
            </summary>
            <param name="dateStart">Start Date</param>
            <param name="finishDate">Finish Date</param>
            <param name="checkDate">Date to be checked</param>
            <param name="ignoreYears">If true, the check will not include the years element, only the day/month</param>
            <returns>bool, true if falls within, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.DateWithin(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Checks to see if a date falls within two dates
            </summary>
            <param name="dateStart"></param>
            <param name="finishDate"></param>
            <param name="checkDateStart"></param>
            <param name="checkDateFinish"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.CheckMinMax(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks a value ensuring it is between an upper/lower limit
            </summary>
            <param name="value">Value to be checked</param>
            <param name="min">Minimum Value Allowed</param>
            <param name="max">Maximum Value Allowed</param>
            <returns>Validated Value</returns>
        </member>
        <member name="M:Shared.Utilities.CheckMinMax(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Checks a value ensuring it is between an upper/lower limit
            </summary>
            <param name="value">Value to be checked</param>
            <param name="min">Minimum Value Allowed</param>
            <param name="max">Maximum Value Allowed</param>
            <returns>Validated Value</returns>
        </member>
        <member name="M:Shared.Utilities.CheckMinMaxU(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Checks a value ensuring it is between an upper/lower limit
            </summary>
            <param name="value">Value to be checked</param>
            <param name="min">Minimum Value Allowed</param>
            <param name="max">Maximum Value Allowed</param>
            <returns>Validated Value</returns>
        </member>
        <member name="M:Shared.Utilities.CheckMinMax(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Checks a value ensuring it is between an upper/lower limit
            </summary>
            <param name="value">Value to be checked</param>
            <param name="min">Minimum Value Allowed</param>
            <param name="max">Maximum Value Allowed</param>
            <returns>Validated Value</returns>
        </member>
        <member name="M:Shared.Utilities.CheckMinMax(System.Double,System.Double,System.Double)">
            <summary>
            Checks a value ensuring it is between an upper/lower limit
            </summary>
            <param name="value">Value to be checked</param>
            <param name="min">Minimum Value Allowed</param>
            <param name="max">Maximum Value Allowed</param>
            <returns>Validated Value</returns>
        </member>
        <member name="M:Shared.Utilities.AddTrailingBackSlash(System.String)">
            <summary>
            Ensures the string s has a trailing backslash
            </summary>
            <param name="s">parameter s usually a path</param>
            <returns>s, ensuring contains a back slash as last character</returns>
        </member>
        <member name="M:Shared.Utilities.ValidateTextExists(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Validates a string exists and meets min/max length requirements
            </summary>
            <param name="s">String to validate</param>
            <param name="error">Error message</param>
            <param name="minLength">Minimum Length</param>
            <param name="maxLength">Maximum Length</param>
        </member>
        <member name="M:Shared.Utilities.ValidateIPAddress(System.String)">
            <summary>
            Validates that the string representation of an IP Address is valid
            </summary>
            <param name="ipAddress"></param>
            <returns>true if properly formatted ip address, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.ValidateDomainName(System.String,System.Boolean,System.Int32)">
            <summary>
            Validates a domain name ensuring it is valid
            </summary>
            <param name="domain">Domain name to validate</param>
            <param name="extendedTest">Indicates wether an extended test is performed
            
            This will physically connect to the website to ensure it exists</param>
            <param name="timeout">Time out in milliseconds if an extended test is performed</param>
            <returns>True if valid domain name, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.ValidateEmail(System.String)">
            <summary>
            Validates an Email Address ensuring it is valid
            </summary>
            <param name="email">Email address to validate</param>
            <returns>True if valid email address, otherwise false</returns>
        </member>
        <member name="M:Shared.Utilities.XMLSetValue(System.String,System.String,System.String,System.String)">
            <summary>
            Set's an XML value in a file
            </summary>
            <param name="xmlFile"></param>
            <param name="parentName"></param>
            <param name="keyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Shared.Utilities.SaveEmailCredentials(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Saves Email Credentials to file
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="host"></param>
            <param name="sender"></param>
            <param name="port"></param>
            <param name="ssl"></param>
        </member>
        <member name="M:Shared.Utilities.FileWrite(System.String,System.String)">
            <summary>
            saves a string to a file
            
            Overwrites if file already exists
            </summary>
            <param name="fileName">Filename and path</param>
            <param name="contents">String data to be encryped and saved</param>
        </member>
        <member name="M:Shared.Utilities.FileRead(System.String,System.Boolean,System.Int32)">
            <summary>
            Opens a file, returns the contents
            </summary>
            <param name="fileName">Filename and path</param>
            <param name="notFoundException">Determines wether an exception is raised if the file does not exist</param>
            <param name="iteration"></param>
            <returns>Returns contents of the file</returns>
        </member>
        <member name="M:Shared.Utilities.FileEncryptedWrite(System.String@,System.String@,System.String)">
            <summary>
            Encrypts a string and saves it to a file
            
            Overwrites if file already exists
            </summary>
            <param name="fileName">Filename and path</param>
            <param name="contents">String data to be encryped and saved</param>
            <param name="key">key used to encrypt the contents</param>
        </member>
        <member name="M:Shared.Utilities.FileEncryptedRead(System.String@,System.String)">
            <summary>
            Opens a file, decrypts the contents
            </summary>
            <param name="fileName">Filename and path</param>
            <param name="key">key used to decrypt the contents</param>
            <returns>Decrypted contents of the file</returns>
        </member>
        <member name="M:Shared.Utilities.GetDatabasePart(System.String@,System.String@)">
            <summary>
            Retrieves part of a database connection string
            </summary>
            <param name="connectionString"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.VATRemove(System.Decimal@,System.Decimal@)">
            <summary>
            Removes Vat/Tax at a specific rate
            </summary>
            <param name="Value">Value including Vat/Tax</param>
            <param name="vatRate">Rate of Vat/Tax</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.VATCalculatePaid(System.Decimal@,System.Decimal@)">
            <summary>
            Determines how much vat/tax has been paid at a specific rate
            </summary>
            <param name="value">Value including Vat/Tax</param>
            <param name="vatRate">Rate of Vat/Tax</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.VATCalculate(System.Decimal@,System.Decimal@)">
            <summary>
            Calculates how much vat/tax will be applied at a specific rate
            </summary>
            <param name="Value">Value including Vat/Tax</param>
            <param name="vatRate">Rate of Vat/Tax</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.BankersRounding(System.Decimal@,System.Int32@)">
            <summary>
            Converts a value using bankers rounding to  a specific number of decimal places
            </summary>
            <param name="value">value to be rounded</param>
            <param name="decimalPlaces">Number of decimal places</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Utilities.FormatMoney(System.Decimal,System.Globalization.CultureInfo,System.Int32,System.Decimal,System.Boolean,System.String)">
            <summary>
            Formates a monetary value for display
            </summary>
            <param name="value">Monetary value, in any currency</param>
            <param name="culture">Culture to be used to format the money</param>
            <param name="decimalPlaces">Number of decimal places</param>
            <param name="conversionRate">Optional conversion rate, 1 = parity with value</param>
            <param name="removeCurrencySymbol">should the currency symbol be removed</param>
            <param name="customCurrencySymbol">Provides a custom currency symbol different to what is used within culture.</param>
            <returns>string, value formatted to local currency value/format</returns>
        </member>
        <member name="M:Shared.Utilities.FormatMoney(System.Decimal@,System.Globalization.CultureInfo@,System.Decimal@,System.Boolean@,System.String@)">
            <summary>
            Format's Money for display
            </summary>
            <param name="value">Monetary value, in any currency</param>
            <param name="culture">Culture to be used to format the money</param>
            <param name="conversionRate">Optional conversion rate, 1 = parity with value</param>
            <param name="removeCurrencySymbol">should the currency symbol be removed</param>
            <param name="customCurrencySymbol">Provides a custom currency symbol different to what is used within culture.</param>
            <returns>string, value formatted to local currency value/format</returns>
        </member>
        <member name="T:Shared.StringCipher">
            <summary>
            Encrypt/Decrypt strings
            </summary>
        </member>
        <member name="T:Shared.Validation">
            <summary>
            Performs basic validation
            </summary>
        </member>
        <member name="M:Shared.Validation.Validate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Validates a string against minimum / maximum length
            
            ArgumentException thrown if validationText does not meet requirements
            </summary>
            <param name="validationText">string to be validated</param>
            <param name="minimumLength">Minimum Length, zero means no minimum length</param>
            <param name="maximumLength">Maximum Length, zero means no maximum length</param>
            <param name="fieldName">Name of field </param>
        </member>
        <member name="M:Shared.Validation.Validate(System.String,Shared.ValidationTypes)">
            <summary>
            Validates string against ValidationType
            
            If the text does not match the ValidationType then an error is raised
            </summary>
            <param name="validationText">string to validate</param>
            <param name="validationType">type of validation</param>
            <returns>Validated string</returns>
        </member>
        <member name="M:Shared.Validation.CardType(System.String)">
            <summary>
            Given a card number, determines what type of credit/debit card it is
            </summary>
            <param name="cardNumber">Card number to check</param>
            <returns>AcceptedCreditCardTypes card type</returns>
        </member>
        <member name="T:Shared.XML">
            <summary>
            XML Manipulation Class
            </summary>
        </member>
        <member name="F:Shared.XML._memoryXMLFile">
            <summary>
            Dictionary for in memory xml file to speed up reading/writing
            </summary>
        </member>
        <member name="F:Shared.XML._lockObject">
            <summary>
            Lock object for asynchronous access
            </summary>
        </member>
        <member name="M:Shared.XML.BeginUpdate(System.String,System.UInt64,System.String)">
            <summary>
            Loads an XML file into memory for faster read / write
            </summary>
            <param name="fileName">File to load</param>
            <param name="timeOut">Time out in seconds - Default 2 minutes</param>
            <param name="rootNode">Root node of XML File</param>
        </member>
        <member name="M:Shared.XML.EndUpdate(System.String,System.Boolean)">
            <summary>
            Ends an update on the file and removes from cache
            </summary>
            <param name="fileName">xml file</param>
            <param name="save">Determines wether contents should be saved</param>
        </member>
        <member name="M:Shared.XML.DeleteXMLValue(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="parentName"></param>
            <param name="keyName"></param>
            <param name="xmlFile"></param>
            <param name="rootName"></param>
        </member>
        <member name="M:Shared.XML.SetXMLValue(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set's an XML value in a file
            </summary>
            <param name="xmlFile"></param>
            <param name="parentName"></param>
            <param name="keyName"></param>
            <param name="value"></param>
            <param name="rootName"></param>
        </member>
        <member name="M:Shared.XML.SetXMLValue(System.String,System.String,System.String,System.String)">
            <summary>
            Set's an XML value in a file
            </summary>
            <param name="xmlFile"></param>
            <param name="parentName"></param>
            <param name="keyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Shared.XML.GetXMLValue(System.String,System.String,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="parentName"></param>
            <param name="keyName"></param>
            <param name="defaultValue"></param>
            <param name="xmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.XML.GetXMLValue(System.String,System.String,System.Boolean,System.String)">
            <summary>
            returns a boolean value
            </summary>
            <param name="parentName">Parent Node</param>
            <param name="keyName">Key Name</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="xmlFile">XML File</param>
            <returns>boolean value if found, otherwise default value</returns>
        </member>
        <member name="M:Shared.XML.GetXMLValue(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns an integer XML Value
            </summary>
            <param name="parentName">Parent Node</param>
            <param name="keyName">Key Name</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="xmlFile">XML File</param>
            <returns>int value from xml file if found, otherwise the default value</returns>
        </member>
        <member name="M:Shared.XML.GetXMLValueU(System.String,System.String,System.UInt64,System.String)">
            <summary>
            Returns a ulong value from an XML File
            </summary>
            <param name="parentName">Parent Node</param>
            <param name="keyName">Key Name</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="xmlFile">XML File</param>
            <returns>ulong value from xml file if found, otherwise default value</returns>
        </member>
        <member name="M:Shared.XML.GetXMLValue64(System.String,System.String,System.Int64,System.String)">
            <summary>
            Returns an Int64 value from an xml file
            </summary>
            <param name="parentName">Parent Node</param>
            <param name="keyName">Key Name</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="xmlFile">XML File</param>
            <returns>Int64 value if found, otherwise default value</returns>
        </member>
        <member name="M:Shared.XML.GetXMLValue(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Returns a date/time value
            </summary>
            <param name="parentName">Parent Node</param>
            <param name="keyName">Key Name</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="xmlFile">XML File</param>
            <returns>Date/time value if found, otherwise default value</returns>
        </member>
        <member name="M:Shared.XML.GetXMLValue(System.String,System.String,System.String,System.String)">
            <summary>
            Returns a string from xml file
            </summary>
            <param name="parentName">Parent Node</param>
            <param name="keyName">Key Name</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="xmlFile">XML File</param>
            <returns>string value if found, otherwise default value</returns>
        </member>
        <member name="M:Shared.XML.GetXMLValue(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a string from xml file
            </summary>
            <param name="parentName">Parent Node</param>
            <param name="keyName">Key Name</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="xmlFile">XML File</param>
            <param name="rootNode"></param>
            <returns>string value if found, otherwise default value</returns>
        </member>
        <member name="M:Shared.XML.GetXMLValue(System.String,System.String,System.String)">
            <summary>
            returns a string value from xml file
            </summary>
            <param name="parentName">Parent Node</param>
            <param name="keyName">Key Name</param>
            <param name="xmlFile">XML File</param>
            <returns>string value if found, otherwise empty string</returns>
        </member>
        <member name="M:Shared.XML.GetXMLValue64(System.String,System.String,System.UInt32,System.String)">
            <summary>
            Returns an Int64 value from an xml file
            </summary>
            <param name="parentName">Parent Node</param>
            <param name="keyName">Key Name</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="xmlFile">XML File</param>
            <returns>Int64 value if found, otherwise default value</returns>
        </member>
        <member name="T:Shared.XMLMemoryFile">
            <summary>
            XML Memory file
            </summary>
        </member>
    </members>
</doc>
